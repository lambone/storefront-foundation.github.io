{"menu":[{"text":"Accordion","as":"Accordion"},{"text":"ActionButton","as":"ActionButton"},{"text":"AppBar","as":"AppBar"},{"text":"AutoScrollToNewChildren","as":"AutoScrollToNewChildren"},{"text":"BackToTop","as":"BackToTop"},{"text":"Box","as":"Box"},{"text":"Breadcrumbs","as":"Breadcrumbs"},{"items":[{"text":"Carousel","as":"carousel/Carousel"},{"text":"CarouselArrows","as":"carousel/CarouselArrows"},{"text":"CarouselDots","as":"carousel/CarouselDots"},{"text":"CarouselThumbnails","as":"carousel/CarouselThumbnails"},{"text":"Lightbox","as":"carousel/Lightbox"},{"text":"MagnifyHint","as":"carousel/MagnifyHint"},{"text":"Media","as":"carousel/Media"},{"text":"MediaCarousel","as":"carousel/MediaCarousel"}],"text":"carousel"},{"text":"CartButton","as":"CartButton"},{"text":"CmsSlot","as":"CmsSlot"},{"items":[{"text":"Drawer","as":"drawer/Drawer"},{"text":"DrawerCloseButton","as":"drawer/DrawerCloseButton"}],"text":"drawer"},{"text":"ErrorBoundary","as":"ErrorBoundary"},{"text":"ExpandableSection","as":"ExpandableSection"},{"text":"fetch","as":"fetch"},{"text":"Fill","as":"Fill"},{"text":"ForwardThumbnail","as":"ForwardThumbnail"},{"items":[{"text":"useAppStore","as":"hooks/useAppStore"},{"text":"useIntersectionObserver","as":"hooks/useIntersectionObserver"},{"text":"useLazyState","items":[{"text":"recordState","as":"hooks/useLazyState/recordState"}]},{"text":"useStateFromProp","as":"hooks/useStateFromProp"}],"text":"hooks"},{"text":"Image","as":"Image"},{"text":"Label","as":"Label"},{"text":"Lazy","as":"Lazy"},{"items":[{"text":"Link","as":"link/Link"},{"text":"LinkContextProvider","as":"link/LinkContextProvider"}],"text":"link"},{"text":"LoadMask","as":"LoadMask"},{"items":[{"text":"Menu","as":"menu/Menu"},{"text":"MenuBack","as":"menu/MenuBack"},{"text":"MenuBody","as":"menu/MenuBody"},{"text":"MenuBranch","as":"menu/MenuBranch"},{"text":"MenuButton","as":"menu/MenuButton"},{"text":"MenuCard","as":"menu/MenuCard"},{"text":"MenuExpanderIcon","as":"menu/MenuExpanderIcon"},{"text":"MenuFooter","as":"menu/MenuFooter"},{"text":"MenuHeader","as":"menu/MenuHeader"},{"text":"MenuIcon","as":"menu/MenuIcon"},{"text":"MenuItemContent","as":"menu/MenuItemContent"},{"text":"MenuLeaf","as":"menu/MenuLeaf"},{"text":"SEOLinks","as":"menu/SEOLinks"}],"text":"menu"},{"items":[{"text":"withAmpFormParser","as":"middlewares/withAmpFormParser"}],"text":"middlewares"},{"items":[{"text":"NavTab","as":"nav/NavTab"},{"text":"NavTabs","as":"nav/NavTabs"}],"text":"nav"},{"text":"NoScript","as":"NoScript"},{"text":"Offline","as":"Offline"},{"items":[{"text":"ProductOption","as":"option/ProductOption"},{"text":"ProductOptionSelector","as":"option/ProductOptionSelector"},{"text":"SwatchProductOption","as":"option/SwatchProductOption"},{"text":"TextProductOption","as":"option/TextProductOption"}],"text":"option"},{"items":[{"text":"Filter","as":"plp/Filter"},{"text":"FilterButton","as":"plp/FilterButton"},{"text":"FilterFooter","as":"plp/FilterFooter"},{"text":"SearchResultsProvider","as":"plp/SearchResultsProvider"},{"text":"ShowMore","as":"plp/ShowMore"},{"text":"Sort","as":"plp/Sort"},{"text":"SortButton","as":"plp/SortButton"},{"text":"useSearchResultsStore","as":"plp/useSearchResultsStore"}],"text":"plp"},{"text":"profile","as":"profile"},{"items":[{"text":"createLazyProps","as":"props/createLazyProps"},{"text":"fetchFromAPI","as":"props/fetchFromAPI"},{"text":"fulfillAPIRequest","as":"props/fulfillAPIRequest"}],"text":"props"},{"text":"PWA","as":"PWA"},{"text":"QuantitySelector","as":"QuantitySelector"},{"text":"Rating","as":"Rating"},{"text":"ResponsiveTiles","as":"ResponsiveTiles"},{"items":[{"text":"replaceState","as":"router/replaceState"},{"text":"storeInitialPropsInHistory","as":"router/storeInitialPropsInHistory"}],"text":"router"},{"text":"Row","as":"Row"},{"items":[{"text":"SearchButton","as":"search/SearchButton"},{"text":"SearchDrawer","as":"search/SearchDrawer"},{"text":"SearchField","as":"search/SearchField"},{"text":"SearchForm","as":"search/SearchForm"},{"text":"SearchHeader","as":"search/SearchHeader"},{"text":"SearchPopover","as":"search/SearchPopover"},{"text":"SearchProvider","as":"search/SearchProvider"},{"text":"SearchSubmitButton","as":"search/SearchSubmitButton"},{"text":"SearchSuggestionGroup","as":"search/SearchSuggestionGroup"},{"text":"SearchSuggestionItem","as":"search/SearchSuggestionItem"},{"text":"SearchSuggestions","as":"search/SearchSuggestions"}],"text":"search"},{"text":"serviceWorker","items":[{"text":"prefetch","as":"serviceWorker/prefetch"},{"text":"prefetchJsonFor","as":"serviceWorker/prefetchJsonFor"}]},{"items":[{"text":"SessionProvider","as":"session/SessionProvider"}],"text":"session"},{"text":"Spacer","as":"Spacer"},{"text":"TabPanel","as":"TabPanel"},{"items":[{"text":"createTheme","as":"theme/createTheme"}],"text":"theme"},{"text":"ToolbarButton","as":"ToolbarButton"},{"items":[{"text":"fetchLatest","items":[{"text":"default","as":"utils/fetchLatest/default"},{"text":"StaleResponseError","as":"utils/fetchLatest/StaleResponseError"}]},{"text":"format","items":[{"text":"price","as":"utils/format/price"}]},{"text":"isBrowser","as":"utils/isBrowser"},{"text":"lazyLoadImages","as":"utils/lazyLoadImages"},{"text":"merge","as":"utils/merge"},{"text":"withCaching","as":"utils/withCaching"},{"text":"withDefaultHandler","as":"utils/withDefaultHandler"}],"text":"utils"}],"exports":{"Accordion":{"name":"Accordion","filename":"Accordion","importPath":"Accordion","description":"Accordion which only allows one child `ExpandableSection` to be open at a time\n\n```js\n <Accordion>\n   <ExpandableSection title=\"First\">\n     <div>The first section</div>\n   </ExpandableSection>\n   <ExpandableSection title=\"Second\">\n     <div>The second section</div>\n   </ExpandableSection>\n   <ExpandableSection title=\"Third\">\n     <div>The third section</div>\n   </ExpandableSection>\n </Accordion>\n```","displayName":"Accordion","methods":[],"props":[{"name":"children","type":{"name":"node"},"required":false,"description":"A list of `ExpandableSection`s that will be controlled."}],"styles":{"classes":[],"name":null},"type":"component","import":"import Accordion from 'react-storefront/Accordion'"},"ActionButton":{"name":"ActionButton","filename":"ActionButton","importPath":"ActionButton","description":"This button class displays a label and value.\n\nExample:\n\n```js\n <ActionButton label=\"Sort\" value=\"Lowest Price\" onClick={openSortMenu} />\n```","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details.","defaultValue":{"value":"{}","computed":false}},{"name":"label","type":{"name":"union","value":[{"name":"string"},{"name":"element"}]},"required":false,"description":"The label to display on the left side of the button."},{"name":"value","type":{"name":"union","value":[{"name":"string"},{"name":"element"}]},"required":false,"description":"The value to display on the right side of the button."}],"styles":{"classes":[{"ruleName":"label","globalClass":".RSFActionButton-label","description":"Styles passed through to the [`Button`](https://material-ui.com/api/button/#css) element's\n`label` CSS rule."},{"ruleName":"caption","globalClass":".RSFActionButton-caption","description":"Styles applied to the label container."},{"ruleName":"button","globalClass":".RSFActionButton-button","description":"Styles passed through to the [`Button`](https://material-ui.com/api/button/#css) element's\n`contained` CSS rule."},{"ruleName":"value","globalClass":".RSFActionButton-value","description":"Styles applied to the values container."}]},"type":"component","import":"import ActionButton from 'react-storefront/ActionButton'"},"AppBar":{"name":"AppBar","filename":"AppBar","importPath":"AppBar","description":"","displayName":"AppBar","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"fixed","type":{"name":"bool"},"required":false,"description":"Set as `true` if the AppBar should be fixed position.","defaultValue":{"value":"false","computed":false}},{"name":"offlineWarning","type":{"name":"union","value":[{"name":"string"},{"name":"element"}]},"required":false,"description":"String or Element to render within the offline warning container at the top of the app.","defaultValue":{"value":"'Your device lost its internet connection.'","computed":false}}],"styles":{"classes":[],"name":null},"type":"component","import":"import AppBar from 'react-storefront/AppBar'"},"AutoScrollToNewChildren":{"name":"AutoScrollToNewChildren","filename":"AutoScrollToNewChildren","importPath":"AutoScrollToNewChildren","description":"A wrapper component which scrolls the first new child into view when\nthe number of children increases.","displayName":"AutoScrollToNewChildren","methods":[],"styles":{"classes":[],"name":null},"props":[],"type":"component","import":"import AutoScrollToNewChildren from 'react-storefront/AutoScrollToNewChildren'"},"BackToTop":{"name":"BackToTop","filename":"BackToTop","importPath":"BackToTop","description":"A floating action button that appears when the user scrolls down,\nwhich scrolls back to the top of the page when clicked.","displayName":"BackToTop","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"Icon","type":{"name":"elementType"},"required":false,"description":"The icon to use within the `Fab` component."},{"name":"showUnderY","type":{"name":"number"},"required":false,"description":"Value which controls where along the Y position the `BackToTop` component is shown.","defaultValue":{"value":"250","computed":false}},{"name":"instantBehaviorUnderY","type":{"name":"number"},"required":false,"description":"When the scroll position is less than this value, the page will smoothly scroll back up. If\nthe scroll position is more than this value, the page will immediately scroll back up.","defaultValue":{"value":"3000","computed":false}},{"name":"fadeTime","type":{"name":"number"},"required":false,"description":"Duration of the fade in/out animation for the icon.","defaultValue":{"value":"320","computed":false}},{"name":"size","type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"Controls size of component.","defaultValue":{"value":"'medium'","computed":false}}],"styles":{"classes":[],"name":null},"type":"component","import":"import BackToTop from 'react-storefront/BackToTop'"},"Box":{"name":"Box","filename":"Box","importPath":"Box","description":"","displayName":"Box","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"split","type":{"name":"bool"},"required":false,"description":"If `true`, split items on opposite sides of the box by applying justify-content: 'space-between'","defaultValue":{"value":"false","computed":false}},{"name":"align","type":{"name":"enum","value":[{"value":"'flex-start'","computed":false},{"value":"'flex-end'","computed":false},{"value":"'center'","computed":false},{"value":"'stretch'","computed":false},{"value":"'baseline'","computed":false}]},"required":false,"description":"CSS value for align-items","defaultValue":{"value":"'center'","computed":false}},{"name":"justify","type":{"name":"enum","value":[{"value":"'flex-start'","computed":false},{"value":"'flex-end'","computed":false},{"value":"'center'","computed":false},{"value":"'space-around'","computed":false},{"value":"'space-between'","computed":false},{"value":"'initial'","computed":false},{"value":"'inherit'","computed":false},{"value":"'stretch'","computed":false},{"value":"'baseline'","computed":false}]},"required":false,"description":"CSS value for justify-content","defaultValue":{"value":"'flex-start'","computed":false}}],"styles":{"classes":[{"ruleName":"root","globalClass":"","description":""},{"ruleName":"split","globalClass":"","description":""}],"name":"Box"},"type":"component","import":"import Box from 'react-storefront/Box'"},"Breadcrumbs":{"name":"Breadcrumbs","filename":"Breadcrumbs","importPath":"Breadcrumbs","description":"","displayName":"Breadcrumbs","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"items","type":{"name":"union","value":[{"name":"arrayOf","value":{"name":"shape","value":{"text":{"name":"string","required":false},"as":{"name":"string","required":false},"href":{"name":"string","required":false}}}},{"name":"bool"}]},"required":false,"description":"The items to display, each with text, [`href`](/apiReference/link/Link#prop-href), and\n[`as`](/apiReference/link/Link#props-as) values. If `false`, no breadcrumbs will be displayed."}],"styles":{"classes":[{"ruleName":"breadcrumbs","globalClass":"","description":"Styles applied to the root element."},{"ruleName":"separator","globalClass":"","description":"Styles applied to the separators."},{"ruleName":"current","globalClass":"","description":"Styles applied to the currently active breadcrumb's element."}],"name":"Breadcrumbs"},"type":"component","import":"import Breadcrumbs from 'react-storefront/Breadcrumbs'"},"CartButton":{"name":"CartButton","filename":"CartButton","importPath":"CartButton","description":"A cart header button that display the number of items in the cart using a badge.\n\nExample:\n\n```js\n<CartButton href=\"/cart\" quantity={1} />\n```","displayName":"CartButton","methods":[],"props":[{"name":"href","type":{"name":"string"},"required":false,"description":"The url path to the cart page.","defaultValue":{"value":"'/cart'","computed":false}},{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"icon","type":{"name":"node"},"required":false,"description":"Optional custom cart icon."},{"name":"buttonProps","type":{"name":"object"},"required":false,"description":"Props passed through to the [`ToolbarButton`](/apiReference/ToolbarButton#props) element.","defaultValue":{"value":"{\n  ['aria-label']: 'Cart',\n  color: 'inherit',\n}","computed":false}},{"name":"badgeProps","type":{"name":"object"},"required":false,"description":"Props passed through to the [`Badge`](https://material-ui.com/api/badge/#props) element.","defaultValue":{"value":"{\n  color: 'primary',\n}","computed":false}},{"name":"linkProps","type":{"name":"object"},"required":false,"description":"Props passed through to the [`Link`](/apiReference/link/Link#props) element.","defaultValue":{"value":"{\n  anchorProps: { 'data-th': 'cart-link' },\n}","computed":false}}],"styles":{"classes":[{"ruleName":"link","globalClass":".RSFCartButton-link","description":"Styles applied to the [`Link`](/apiReference/link/Link) element used as the root."},{"ruleName":"badge","globalClass":".RSFCartButton-badge","description":"Styles passed through to the [`Badge`](https://material-ui.com/api/badge/#css) element's\n`badge` CSS rule."},{"ruleName":"icon","globalClass":".RSFCartButton-icon","description":"Styles applied to the button icon."}],"name":"CartButton"},"type":"component","import":"import CartButton from 'react-storefront/CartButton'"},"CmsSlot":{"name":"CmsSlot","filename":"CmsSlot","importPath":"CmsSlot","description":"A container for HTML blob content from a CMS.  Content is dangerously inserted into the DOM.\nPass the html as a string as the child of this component. Additional props are spread to the\nrendered span element.","displayName":"CmsSlot","methods":[],"props":[{"name":"lazyLoadImages","defaultValue":{"value":"false","computed":false},"required":false}],"styles":{"classes":[{"ruleName":"inline","globalClass":".RSFCmsSlot-inline","description":"If `true`, will use `display: inline` style."},{"ruleName":"block","globalClass":".RSFCmsSlot-block","description":""},{"ruleName":"root","globalClass":".RSFCmsSlot-root","description":""}],"name":"CmsSlot"},"type":"component","import":"import CmsSlot from 'react-storefront/CmsSlot'"},"ErrorBoundary":{"name":"ErrorBoundary","filename":"ErrorBoundary","importPath":"ErrorBoundary","description":"An internal component that catches errors durring rendering, sets the\nerror, stack, and page properties of the app state accordingly, and calls\nthe registered error reporter if one is configured.","displayName":"ErrorBoundary","methods":[],"props":[{"name":"onError","type":{"name":"func"},"required":false,"description":"A function to call whenever an error occurs.  The function is passed an\nobject with `error` (the error message) and `stack` (the stack trace as a string).","defaultValue":{"value":"Function.prototype","computed":true}}],"styles":{"classes":[],"name":null},"type":"component","import":"import ErrorBoundary from 'react-storefront/ErrorBoundary'"},"ExpandableSection":{"name":"ExpandableSection","filename":"ExpandableSection","importPath":"ExpandableSection","description":"An expandable info section.  Example:\n\n```js\n <ExpandableSection title=\"Help\" caption=\"Click here for more info\">\n   <Typography>This is a help section</Typography>\n </ExpandableSection>\n```","displayName":"ExpandableSection","methods":[],"props":[{"name":"title","type":{"name":"union","value":[{"name":"string"},{"name":"element"}]},"required":false,"description":"The title for the header of the expandable section."},{"name":"caption","type":{"name":"union","value":[{"name":"string"},{"name":"element"}]},"required":false,"description":"Text to display to the right of the heading."},{"name":"ExpandIcon","type":{"name":"object"},"required":false,"description":"The icon to use for collapsed groups.","defaultValue":{"value":"ExpandMoreIcon","computed":true}},{"name":"CollapseIcon","type":{"name":"object"},"required":false,"description":"The icon to use for expanded groups.","defaultValue":{"value":"ExpandMoreIcon","computed":true}},{"name":"margins","type":{"name":"bool"},"required":false,"description":"If `false`, the default left and right margins are removed.","defaultValue":{"value":"true","computed":false}},{"name":"expanded","type":{"name":"bool"},"required":false,"description":"Can be defined to control the expanded state externally with props, rather than having it\ncontrolled internally by state."},{"name":"defaultExpanded","type":{"name":"bool"},"required":false,"description":"Defaults the panel to being expanded, without controlling the state.","defaultValue":{"value":"false","computed":false}}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFExpandableSection-root","description":"Styles applied to the root element."},{"ruleName":"margins","globalClass":".RSFExpandableSection-margins","description":"Styles applied to the root element if [`margins`](#prop-margins) is `true`."},{"ruleName":"caption","globalClass":".RSFExpandableSection-caption","description":"Styles applied to the caption element."},{"ruleName":"expandedCaption","globalClass":".RSFExpandableSection-expandedCaption","description":"Styles applied to the caption element when the section is expanded."},{"ruleName":"details","globalClass":".RSFExpandableSection-details","description":"Styles applied to the body element of the expansion panel."},{"ruleName":"summary","globalClass":".RSFExpandableSection-summary","description":"Styles applied to the summary element of the expansion panel."},{"ruleName":"summaryContent","globalClass":".RSFExpandableSection-summaryContent","description":"Styles applied to the content of the summary element of the expansion panel."},{"ruleName":"summaryExpanded","globalClass":".RSFExpandableSection-summaryExpanded","description":"Styles applied to the summary element of the expansion panel when the section is expanded."},{"ruleName":"expandIconExpanded","globalClass":".RSFExpandableSection-expandIconExpanded","description":"Styles applied to the expand icon of the expansion panel when the section is expanded if the\n[`ExpandIcon`](#prop-ExpandIcon) is different than the [`CollapseIcon`](#prop-CollapseIcon)."},{"ruleName":"summaryIconWrap","globalClass":".RSFExpandableSection-summaryIconWrap","description":"Styles applied to the expand icon of the expansion panel when the [`ExpandIcon`](#prop-ExpandIcon)\nis different than the [`CollapseIcon`](#prop-CollapseIcon)."},{"ruleName":"withCollapseIcon","globalClass":".RSFExpandableSection-withCollapseIcon","description":"Styles applied to the summary element of the expansion panel."},{"ruleName":"expandedPanel","globalClass":".RSFExpandableSection-expandedPanel","description":"Styles applied to the root element when the section is expanded."},{"ruleName":"title","globalClass":".RSFExpandableSection-title","description":"Styles applied to the title element."},{"ruleName":"expandIcon","globalClass":".RSFExpandableSection-expandIcon","description":"Styles applied to the expand icon element."},{"ruleName":"collapseIcon","globalClass":".RSFExpandableSection-collapseIcon","description":"Styles applied to the collapse icon element."}],"name":"ExpandableSection"},"type":"component","import":"import ExpandableSection from 'react-storefront/ExpandableSection'"},"Fill":{"name":"Fill","filename":"Fill","importPath":"Fill","description":"This component sizes the height of the child element as a percentage of its width.  It expects\nonly a single child.\n\nExample:\n\n```js\n <Fill height=\"100%\">\n   <div>this element's height will be the same as its width.</div>\n </Fill>\n```","displayName":"Fill","methods":[],"props":[{"name":"height","type":{"name":"string"},"required":false,"description":"The height as a percentage of the width in a css compatible expression.  For example:\n`\"100%\"` or `\"calc(100% + 50px)\"`, etc...  If omitted, this component does nothing except render\nthe provided child."}],"styles":{"classes":[],"name":null},"type":"component","import":"import Fill from 'react-storefront/Fill'"},"ForwardThumbnail":{"name":"ForwardThumbnail","filename":"ForwardThumbnail","importPath":"ForwardThumbnail","description":"Wrap product links in this component to reuse the thumbnail as the main image in the product\nskeleton when transitioning to the PDP to make the transition feel instant. This component\nsets the `thumbnail` ref on the provided `PWAContext` to the `src` prop of the first `img`\nelement found amongst the descendant elements in the tree.\n\nExample:\n\n```js\n <ForwardThumbnail>\n   <Link href=\"/p/[productId]\" as={product.url}>\n     <a>\n       <Image src={product.media.thumbnail.src} alt={product.media.thumbnail.alt} />\n       <div>{product.name}</div>\n     </a>\n   </Link>\n </ForwardThumbnail>\n```","displayName":"ForwardThumbnail","methods":[],"styles":{"classes":[],"name":null},"props":[],"type":"component","import":"import ForwardThumbnail from 'react-storefront/ForwardThumbnail'"},"Image":{"name":"Image","filename":"Image","importPath":"Image","description":"Displays an image that can be lazy loaded and made to auto-scale to fit the parent element\nby setting the `fill` prop, or grow/shrink while maintaining a given aspect ratio\nby setting the `aspectRatio` prop.","displayName":"Image","methods":[],"props":[{"name":"notFoundSrc","type":{"name":"string"},"required":false,"description":"The URL of the image to use in case the primary image fails to load."},{"name":"aspectRatio","type":{"name":"number"},"required":false,"description":"The ratio of height/width as a float.  For example: `1` when the height and width match,\n`0.5` when height is half of the width."},{"name":"contain","type":{"name":"bool"},"required":false,"description":"Set to `true` to apply object-fit:contain to the image so that it automatically\nfits within the element's height and width.","defaultValue":{"value":"false","computed":false}},{"name":"fill","type":{"name":"bool"},"required":false,"description":"The same as `contain`, except images are stretched to fill the element's height and width.","defaultValue":{"value":"false","computed":false}},{"name":"lazy","type":{"name":"enum","value":[{"value":"'ssr'","computed":false},{"value":"true","computed":false},{"value":"false","computed":false}]},"required":false,"description":"Set to `true` to wait until the image enters the viewport before loading it. Set to `\"ssr\"` to\nonly lazy load images during server side rendering.","defaultValue":{"value":"false","computed":false}},{"name":"lazyOffset","type":{"name":"number"},"required":false,"description":"Sets the minimum amount of pixels the image can be scrolled out of view before it\nis lazy loaded.  You must set `lazy` in order for this setting to take effect.","defaultValue":{"value":"100","computed":false}},{"name":"ImgElement","defaultValue":{"value":"'img'","computed":false},"required":false}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFImage-root","description":"Styles applied to the root element."},{"ruleName":"image","globalClass":".RSFImage-image","description":"Styles applied to the image element."},{"ruleName":"fit","globalClass":".RSFImage-fit","description":"Styles applied to the image element when [`aspectRatio`](#prop-aspectRatio) is defined."},{"ruleName":"contain","globalClass":".RSFImage-contain","description":"Styles applied to the root element when [`contain`](#prop-contain) is `true`."},{"ruleName":"fill","globalClass":".RSFImage-fill","description":"Styles applied to the root element when [`fill`](#prop-fill) is `true`."}],"name":"Image"},"type":"component","import":"import Image from 'react-storefront/Image'"},"Label":{"name":"Label","filename":"Label","importPath":"Label","description":"","displayName":"Label","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"className","type":{"name":"string"},"required":false,"description":"CSS class to apply to the root element"}],"styles":{"classes":[],"name":null},"type":"component","import":"import Label from 'react-storefront/Label'"},"Lazy":{"name":"Lazy","filename":"Lazy","importPath":"Lazy","description":"Defers the rendering of children until the component is visible in the viewport. When\nusing Lazy we recommend assigning a CSS class that defines minHeight and minWidth to prevent\nlayout instability when children are lazy loaded.\n\nYou can use `<Lazy ssrOnly>` to only implement lazy behavior during server side rendering.\n\nExample:\n\n```js\n<Lazy style={{ minHeight: 200 }}>\n  <SomeExpensiveComponent/>\n</Lazy>\n```","displayName":"Lazy","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"className","type":{"name":"string"},"required":false,"description":"CSS class to apply to the root element"},{"name":"ssrOnly","type":{"name":"bool"},"required":false,"description":"Set to `true` to render children immediately when this component is mounted after initial hydration.","defaultValue":{"value":"false","computed":false}}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFLazy-root","description":"Styles applied to the root element."}],"name":"Lazy"},"type":"component","import":"import Lazy from 'react-storefront/Lazy'"},"LoadMask":{"name":"LoadMask","filename":"LoadMask","importPath":"LoadMask","description":"A load mask to display when fetching data from the server.","displayName":"LoadMask","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"show","type":{"name":"bool"},"required":false,"description":"If defined, `true` will display the load mask, while `false` will be hide it."},{"name":"fullscreen","type":{"name":"bool"},"required":false,"description":"Set to `true` to toggle the overflow style on the body when showing.","defaultValue":{"value":"false","computed":false}},{"name":"transparent","type":{"name":"bool"},"required":false,"description":"Set to `true` to show partially background through the load mask","defaultValue":{"value":"false","computed":false}},{"name":"align","type":{"name":"enum","value":[{"value":"'center'","computed":false},{"value":"'top'","computed":false}]},"required":false,"description":"Set to `'top'` to show the spinner near the top.","defaultValue":{"value":"'center'","computed":false}}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFLoadMask-root","description":"Styles applied to the root element."},{"ruleName":"fullscreen","globalClass":".RSFLoadMask-fullscreen","description":"Styles applied to the root element when [`fullscreen`](#prop-fullscreen) is `true`."},{"ruleName":"transparent","globalClass":".RSFLoadMask-transparent","description":"Styles applied to the root element when [`transparent`](#prop-transparent) is `true`."},{"ruleName":"alignTop","globalClass":".RSFLoadMask-alignTop","description":"Styles applied to the root element when [`align`](#prop-align) is `'top'`."},{"ruleName":"show","globalClass":".RSFLoadMask-show","description":"Styles applied to the root element when [`show`](#prop-show) is `true`."}],"name":"LoadMask"},"type":"component","import":"import LoadMask from 'react-storefront/LoadMask'"},"NoScript":{"name":"NoScript","filename":"NoScript","importPath":"NoScript","description":"A simple wrapper for HTML noscript that is testable in enzyme.  This is\nneeded since enzyme won't render the contents of a noscript element.\n@param {*} props","displayName":"NoScript","methods":[],"styles":{"classes":[],"name":null},"props":[],"type":"component","import":"import NoScript from 'react-storefront/NoScript'"},"Offline":{"name":"Offline","filename":"Offline","importPath":"Offline","description":"A page to display when in Offline mode","displayName":"Offline","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"heading","type":{"name":"union","value":[{"name":"string"},{"name":"element"}]},"required":false,"description":"Text (or an element) to display as the heading.","defaultValue":{"value":"\"You're offline\"","computed":false}},{"name":"message","type":{"name":"union","value":[{"name":"string"},{"name":"element"}]},"required":false,"description":"Text (or an element) to display as the message.","defaultValue":{"value":"'Please check your internet connection'","computed":false}},{"name":"Icon","type":{"name":"elementType"},"required":false,"description":"An icon to display.","defaultValue":{"value":"() => <CloseOffIcon />","computed":false}}],"styles":{"classes":[],"name":null},"type":"component","import":"import Offline from 'react-storefront/Offline'"},"PWA":{"name":"PWA","filename":"PWA","importPath":"PWA","description":"","displayName":"PWA","methods":[],"props":[{"name":"errorReporter","type":{"name":"func"},"required":false,"description":"A function to be called whenever an error occurs.  Use this to report errors\nto a service like Airbrake or Rollbar."}],"styles":{"classes":[{"ruleName":"@global","globalClass":".RSFPWA-@global","description":""}],"name":"PWA"},"type":"component","import":"import PWA from 'react-storefront/PWA'"},"QuantitySelector":{"name":"QuantitySelector","filename":"QuantitySelector","importPath":"QuantitySelector","description":"A quantity selector with plus and minus buttons.","displayName":"QuantitySelector","methods":[],"props":[{"name":"name","type":{"name":"string"},"required":false,"description":"The name to apply to the input when rendering AMP.","defaultValue":{"value":"'quantity'","computed":false}},{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"addIcon","type":{"name":"element"},"required":false,"description":"The plus icon."},{"name":"subtractIcon","type":{"name":"element"},"required":false,"description":"The minus icon."},{"name":"value","type":{"name":"number"},"required":false,"description":"The current value."},{"name":"minValue","type":{"name":"number"},"required":false,"description":"The minimum value.","defaultValue":{"value":"1","computed":false}},{"name":"maxValue","type":{"name":"number"},"required":false,"description":"The maximum value.","defaultValue":{"value":"100","computed":false}},{"name":"onChange","type":{"name":"func"},"required":false,"description":"Called when the value is changed.  The new value is passed as the only argument","defaultValue":{"value":"Function.prototype","computed":true}},{"name":"ariaLabel","type":{"name":"string"},"required":false,"description":"The accessibility label.  Add and subtract button `aria-label` values are derived from this as\n`\"add one {ariaLabel}\"` and `\"subtract one {ariaLabel}\"`.","defaultValue":{"value":"'quantity'","computed":false}},{"name":"addButtonProps","defaultValue":{"value":"{}","computed":false},"required":false},{"name":"subtractButtonProps","defaultValue":{"value":"{}","computed":false},"required":false},{"name":"inputProps","defaultValue":{"value":"{}","computed":false},"required":false}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFQuantitySelector-root","description":"Styles applied to the root element."},{"ruleName":"icon","globalClass":".RSFQuantitySelector-icon","description":"Styles applied to the icon elements."},{"ruleName":"button","globalClass":".RSFQuantitySelector-button","description":"Styles applied to the icon button elements."},{"ruleName":"subtract","globalClass":".RSFQuantitySelector-subtract","description":"Styles applied to the subtract icon button element."},{"ruleName":"add","globalClass":".RSFQuantitySelector-add","description":"Styles applied to the add icon button element."},{"ruleName":"input","globalClass":".RSFQuantitySelector-input","description":"Styles applied to the text input element."}],"name":"QuantitySelector"},"type":"component","import":"import QuantitySelector from 'react-storefront/QuantitySelector'"},"Rating":{"name":"Rating","filename":"Rating","importPath":"Rating","description":"","displayName":"Rating","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"value","type":{"name":"number"},"required":false,"description":"The number of stars to display.  Can be an integer or a float ending in .5."},{"name":"reviewCount","type":{"name":"number"},"required":false,"description":"The number of reviews."},{"name":"label","type":{"name":"func"},"required":false,"description":"A function that returns the label displayed to the right of the review count.\nFor example: `<Rating label={reviewCount => <span> {reviewCount == 1 ? 'review' : 'reviews'}</span>}/>`.\nThis value used in this example is the default.","defaultValue":{"value":"reviewCount => <span> {reviewCount == 1 ? 'review' : 'reviews'}</span>","computed":false}},{"name":"product","type":{"name":"object"},"required":false,"description":"Can be used to as an alternative to setting `value` and `reviewCount` individually."},{"name":"iconFull","type":{"name":"elementType"},"required":false,"description":"Custom full point icon."},{"name":"iconHalf","type":{"name":"elementType"},"required":false,"description":"Custom half point icon."},{"name":"iconEmpty","type":{"name":"elementType"},"required":false,"description":"Custom empty icon; will override `fillEmpty` icon."},{"name":"fillEmpty","type":{"name":"bool"},"required":false,"description":"If `true`, use a filled icon with light gray background for empty icon","defaultValue":{"value":"false","computed":false}}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFRating-root","description":""},{"ruleName":"filledEmpty","globalClass":".RSFRating-filledEmpty","description":""},{"ruleName":"blank","globalClass":".RSFRating-blank","description":""},{"ruleName":"reviewsLabel","globalClass":".RSFRating-reviewsLabel","description":""}],"name":"Rating"},"type":"component","import":"import Rating from 'react-storefront/Rating'"},"ResponsiveTiles":{"name":"ResponsiveTiles","filename":"ResponsiveTiles","importPath":"ResponsiveTiles","description":"A responsive grid of tiles that changes the number of columns based on the viewport size.\nThis component commonly used in product listings and search results.","displayName":"ResponsiveTiles","methods":[],"props":[{"name":"autoScrollToNewTiles","type":{"name":"bool"},"required":false,"description":"If `true`, automatically scroll to the first new tile when the\nnumber of tiles is increased.","defaultValue":{"value":"false","computed":false}},{"name":"cols","type":{"name":"shape","value":{"xs":{"name":"number","required":false},"sm":{"name":"number","required":false},"md":{"name":"number","required":false},"lg":{"name":"number","required":false},"xl":{"name":"number","required":false}}},"required":false,"description":"A map of viewport widths to number of columns.  For example:\n```\n cols={{\n   xs: 2,\n   sm: 3,\n   md: 4,\n   lg: 5,\n   xl: 5\n }}\n```","defaultValue":{"value":"{\n  xs: 2,\n  sm: 3,\n  md: 4,\n  lg: 5,\n  xl: 5,\n}","computed":false}},{"name":"spacing","type":{"name":"number"},"required":false,"description":"The spacing between the tiles in theme spacing units.","defaultValue":{"value":"1","computed":false}}],"styles":{"classes":[],"name":null},"type":"component","import":"import ResponsiveTiles from 'react-storefront/ResponsiveTiles'"},"Row":{"name":"Row","filename":"Row","importPath":"Row","description":"A grid item that takes up the full viewport.  Provided for backwards compatibility with\nReact Storefront 6.","displayName":"Row","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."}],"styles":{"classes":[],"name":null},"type":"component","import":"import Row from 'react-storefront/Row'"},"Spacer":{"name":"Spacer","filename":"Spacer","importPath":"Spacer","description":"Renders a simple div with flex: 1 to be used as a spacer.  Since this is a\ncommon case, the main purposed of this class is to minimize the amount of\ncss generated for an app.","displayName":"Spacer","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFSpacer-root","description":""}],"name":"Spacer"},"type":"component","import":"import Spacer from 'react-storefront/Spacer'"},"TabPanel":{"name":"TabPanel","filename":"TabPanel","importPath":"TabPanel","description":"A simple tab panel that is AMP-compatible.  Tab names are pulled from the label prop of the child elements.\nAny type of element can be a child.\n\nExample:\n\n```js\n <TabPanel>\n   <div label=\"Description\">\n     Description here\n   </div>\n   <CmsSlot label=\"Instructions\">\n     { instructionsFromCms }\n   </CmsSlot>\n </TabPanel>\n```","displayName":"TabPanel","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"scrollable","type":{"name":"bool"},"required":false,"description":"Set to false to prevent the tabs from scrolling.","defaultValue":{"value":"true","computed":false}},{"name":"selected","type":{"name":"number"},"required":false,"description":"Selected tab index.","defaultValue":{"value":"0","computed":false}},{"name":"onChange","type":{"name":"func"},"required":false,"description":"Called when the selected tab is changed."},{"name":"tabProps","type":{"name":"func"},"required":false,"description":"A function that takes an object containing:\n\n- child: The child element\n- index: The index of the child\n- selected: The index of the currently selected element\n\n... and returns props for the corresponding Material UI `Tab` element.","defaultValue":{"value":"Function.prototype","computed":true}},{"name":"panelProps","type":{"name":"func"},"required":false,"description":"A function that takes an object containing:\n\n- child: The child element\n- index: The index of the child\n- selected: The index of the currently selected element\n\n... and returns props for the corresponding panel `div` element.","defaultValue":{"value":"Function.prototype","computed":true}},{"name":"tabsProps","type":{"name":"object"},"required":false,"description":"Props for the Material UI `Tabs` element."},{"name":"renderPanels","type":{"name":"func"},"required":false,"description":"A function that takes the panels as an argument and returns a react element to render.","defaultValue":{"value":"panels => panels","computed":false}}],"styles":{"classes":[],"name":null},"type":"component","import":"import TabPanel from 'react-storefront/TabPanel'"},"ToolbarButton":{"name":"ToolbarButton","filename":"ToolbarButton","importPath":"ToolbarButton","description":"A toolbar button with optional label.  Use these in your AppBar. All additional\nprops are spread to the underlying material-ui IconButton.","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details.","defaultValue":{"value":"{}","computed":false}},{"name":"icon","type":{"name":"element"},"required":false,"description":"The icon to use for the button."},{"name":"label","type":{"name":"union","value":[{"name":"string"},{"name":"element"}]},"required":false,"description":"The label text for the button."}],"styles":{"classes":[{"ruleName":"wrap","globalClass":".RSFToolbarButton-wrap","description":"Styles applied to the content wrapper element inside the button"}]},"type":"component","import":"import ToolbarButton from 'react-storefront/ToolbarButton'"},"carousel/Carousel":{"name":"Carousel","filename":"Carousel","importPath":"carousel/Carousel","description":"A grouped display of elements that shows one element at a time, and changes to peer elements by\nswiping to the left or right, or by clicking arrows on the sides of the component. Generally used\nas a non-Amp option for the [`CarouselComponent`](/apiReference/carousel%f2MediaCarousel#prop-CarouselComponent)\nprop within a [`MediaCarousel`](/apiReference/carousel%f2MediaCarousel).","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"arrows","type":{"name":"enum","value":[{"value":"false","computed":false},{"value":"'desktop'","computed":false},{"value":"'all'","computed":false}]},"required":false,"description":"Set to `false` to hide arrows, `'desktop'` to only show them\non non-touch devices, `'all'` to always show arrows.","defaultValue":{"value":"'desktop'","computed":false}},{"name":"aboveAdornments","type":{"name":"arrayOf","value":{"name":"element"}},"required":false,"description":"Nodes to render above the Carousel."},{"name":"belowAdornments","type":{"name":"arrayOf","value":{"name":"element"}},"required":false,"description":"Nodes to render below the Carousel."},{"name":"autoplay","type":{"name":"bool"},"required":false,"description":"If `true`, the Carousel will automatically cycle through the media elements.","defaultValue":{"value":"false","computed":false}},{"name":"interval","type":{"name":"number"},"required":false,"description":"The interval time (in milliseconds) for [`autoplay`](#prop-autoplay).","defaultValue":{"value":"3000","computed":false}},{"name":"indicators","defaultValue":{"value":"true","computed":false},"required":false}],"styles":{"classes":[],"name":null},"type":"component","import":"import Carousel from 'react-storefront/carousel/Carousel'"},"carousel/CarouselArrows":{"name":"CarouselArrows","filename":"CarouselArrows","importPath":"carousel/CarouselArrows","description":"Arrows that are overlaid onto a [`Carousel`](/apiReference/carousel%f2Carousel) that will change\nthe slide shown when clicked.","displayName":"CarouselArrows","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"className","type":{"name":"string"},"required":false,"description":"CSS class to apply to the root element."},{"name":"selected","type":{"name":"number"},"required":false,"description":"Index of the currently selected slide in the [`Carousel`](/apiReference/carousel/Carousel)."},{"name":"setSelected","type":{"name":"func"},"required":false,"description":"Function to change the value of [`selected`](#prop-selected)."},{"name":"count","type":{"name":"number"},"required":false,"description":"Total number of slides in the [`Carousel`](/apiReference/carousel/Carousel)."}],"styles":{"classes":[{"ruleName":"arrows","globalClass":".RSFCarouselArrows-arrows","description":"Styles applied to the root element."},{"ruleName":"arrow","globalClass":".RSFCarouselArrows-arrow","description":"Styles applied to each of the arrow icon buttons."},{"ruleName":"leftArrow","globalClass":".RSFCarouselArrows-leftArrow","description":"Styles applied to the left arrow icon buttons."},{"ruleName":"rightArrow","globalClass":".RSFCarouselArrows-rightArrow","description":"Styles applied to the right arrow icon buttons."},{"ruleName":"icon","globalClass":".RSFCarouselArrows-icon","description":"Styles applied to each of the icon elements."}],"name":"CarouselArrows"},"type":"component","import":"import CarouselArrows from 'react-storefront/carousel/CarouselArrows'"},"carousel/CarouselDots":{"name":"CarouselDots","filename":"CarouselDots","importPath":"carousel/CarouselDots","description":"An overlay shown at the bottom of a [`Carousel`](/apiReference/carousel%f2Carousel) that shows a\nsequence of dots representing the slides in the Carousel.","displayName":"CarouselDots","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"count","type":{"name":"number"},"required":true,"description":"The total number of dots to show."},{"name":"selected","type":{"name":"number"},"required":true,"description":"The index of the selected dot."}],"styles":{"classes":[],"name":null},"type":"component","import":"import CarouselDots from 'react-storefront/carousel/CarouselDots'"},"carousel/CarouselThumbnails":{"name":"CarouselThumbnails","filename":"CarouselThumbnails","importPath":"carousel/CarouselThumbnails","description":"A set of thumbnails to show below a [`Carousel`](/apiReference/carousel%f2Carousel). Thumbnails can\nbe clicked to switch to the given slide. Internally, `CarouselThumbnails` uses MaterialUI's\n[`Tabs`](https://material-ui.com/api/tabs) component to indicate which slide is selected","displayName":"CarouselThumbnails","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"className","type":{"name":"string"},"required":false,"description":"CSS class to apply to the root element."},{"name":"selected","type":{"name":"number"},"required":false,"description":"Index of the currently selected slide in the [`Carousel`](/apiReference/carousel/Carousel)."},{"name":"setSelected","type":{"name":"func"},"required":false,"description":"Function to change the value of [`selected`](#prop-selected)."},{"name":"thumbnails","type":{"name":"arrayOf","value":{"name":"shape","value":{"src":{"name":"string","required":false},"alt":{"name":"string","required":false}}}},"required":false,"description":"Array of objects containing the data for an image to be used for each thumbnail."},{"name":"thumbnailPosition","type":{"name":"enum","value":[{"value":"'bottom'","computed":false},{"value":"'top'","computed":false},{"value":"'left'","computed":false},{"value":"'right'","computed":false}]},"required":false,"description":"Position of the thumbnails, relative to the main carousel image."}],"styles":{"classes":[{"ruleName":"thumbs","globalClass":".RSFCarouselThumbnails-thumbs","description":"Styles applied to the root element."},{"ruleName":"thumb","globalClass":".RSFCarouselThumbnails-thumb","description":"Styles applied to each thumbnail element."},{"ruleName":"tabsIndicator","globalClass":".RSFCarouselThumbnails-tabsIndicator","description":"Styles passed through to the [`Tabs`](https://material-ui.com/api/tabs/#css) element's\n`indicator` CSS rule."},{"ruleName":"tabsRoot","globalClass":".RSFCarouselThumbnails-tabsRoot","description":"Styles applied to the root element of the Tabs element"},{"ruleName":"tabsVertical","globalClass":".RSFCarouselThumbnails-tabsVertical","description":"Styles applied the to the root element of the Tabs element when `thumbnailPosition` is `left` or `right`."},{"ruleName":"tabsRootLeft","globalClass":".RSFCarouselThumbnails-tabsRootLeft","description":"Styles applied to the root element of the Tabs element when `thumbnailPosition` is `left`."},{"ruleName":"tabsRootRight","globalClass":".RSFCarouselThumbnails-tabsRootRight","description":"Styles applied to the root element of the Tabs element when `thumbnailPosition` is `right`."},{"ruleName":"tabsRootTop","globalClass":".RSFCarouselThumbnails-tabsRootTop","description":"Styles applied to the root element of the Tabs element when `thumbnailPosition` is `top`."},{"ruleName":"tabsRootBottom","globalClass":".RSFCarouselThumbnails-tabsRootBottom","description":"Styles applied to the root element of the Tabs element when `thumbnailPosition` is `bottom`."},{"ruleName":"tabRoot","globalClass":".RSFCarouselThumbnails-tabRoot","description":"Styles passed through to each [`Tab`](https://material-ui.com/api/tabs/#css) element's\n`root` CSS rule."},{"ruleName":"selectedTab","globalClass":".RSFCarouselThumbnails-selectedTab","description":"Styles passed through to each [`Tab`](https://material-ui.com/api/tabs/#css) element's\n`selected` CSS rule."},{"ruleName":"tabWrapper","globalClass":".RSFCarouselThumbnails-tabWrapper","description":"Styles passed through to each [`Tab`](https://material-ui.com/api/tabs/#css) element's\n`wrapper` CSS rule."}]},"type":"component","import":"import CarouselThumbnails from 'react-storefront/carousel/CarouselThumbnails'"},"carousel/Lightbox":{"name":"Lightbox","filename":"Lightbox","importPath":"carousel/Lightbox","description":"","methods":[],"styles":{"classes":[],"name":null},"props":[],"type":"component","import":"import Lightbox from 'react-storefront/carousel/Lightbox'"},"carousel/MagnifyHint":{"name":"MagnifyHint","filename":"MagnifyHint","importPath":"carousel/MagnifyHint","description":"An element overlaid on a [`Carousel`](/apiReference/carousel%f2Carousel) that displays a tip for a\nuser to hover/click the Carousel in order to zoom in.","displayName":"MagnifyHint","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"className","type":{"name":"string"},"required":false,"description":"CSS class to apply to the root element."},{"name":"zoomTextDesktop","type":{"name":"string"},"required":false,"description":"The text displayed to tell the user to hover to zoom.","defaultValue":{"value":"'Hover to Zoom'","computed":false}},{"name":"expandTextMobile","type":{"name":"string"},"required":false,"description":"The text displayed to tell a mobile user to tap to expand.","defaultValue":{"value":"'Tap to Expand'","computed":false}},{"name":"expandTextDesktop","type":{"name":"string"},"required":false,"description":"The text displayed to tell a desktop user to click to expand.","defaultValue":{"value":"'Click to Expand'","computed":false}},{"name":"disableZoom","type":{"name":"bool"},"required":false,"description":"If `true`, zooming is disabled and the hint for zooming is not shown."},{"name":"disableExpand","type":{"name":"bool"},"required":false,"description":"If `true`, expanding is disabled and the hint for expanding is not shown."}],"styles":{"classes":[],"name":null},"type":"component","import":"import MagnifyHint from 'react-storefront/carousel/MagnifyHint'"},"carousel/Media":{"name":"Media","filename":"Media","importPath":"carousel/Media","description":"An element that determines the proper tag to use for a media node within a\n[`Carousel`](/apiReference/carousel%f2Carousel).","displayName":"Media","methods":[],"props":[{"name":"type","type":{"name":"enum","value":[{"value":"'image'","computed":false},{"value":"'video'","computed":false}]},"required":false,"description":"The type of media to display.","defaultValue":{"value":"'image'","computed":false}},{"name":"magnifyProps","type":{"name":"object"},"required":false,"description":"Props passed to the [`ReactImageMagnify`](https://github.com/ethanselzer/react-image-magnify#usage)\nelement for an `'image'` type when [`magnify`](#prop-magnify) is defined."},{"name":"imageProps","type":{"name":"object"},"required":false,"description":"Other props to pass to the [`Image`](/apiReference/Image) for an `'image'` type."},{"name":"alt","type":{"name":"string"},"required":false,"description":"Used as the `alt` attribute for the `<img>` or `<video>`."},{"name":"poster","type":{"name":"string"},"required":false,"description":"Used as the `poster` attribute for a `<video>`."},{"name":"magnify","type":{"name":"union","value":[{"name":"bool"},{"name":"object"}]},"required":false,"description":"An object to pass to pass to `ReactImageMagnify` containing the data for the magnified image.\nIf `false`, the media is not able to be magnified."}],"styles":{"classes":[],"name":null},"type":"component","import":"import Media from 'react-storefront/carousel/Media'"},"carousel/MediaCarousel":{"name":"MediaCarousel","filename":"MediaCarousel","importPath":"carousel/MediaCarousel","description":"A carousel that displays images and videos for a product.  Specify\nimages and videos via the media prop, which should be of the form:\n\n```js\n <MediaCarousel\n   media={[\n     { src: 'https://domain.com/path/to/image.jpg', alt: 'Red Shirt', type: 'image' },\n     { src: 'https://domain.com/path/to/image.mpeg', alt: 'Demonstration', type: 'video' },\n   ]}\n   thumbnail={{\n     src: 'https://domain.com/path/to/thumbnail.jpg', alt: 'thumbnail'\n   }}\n />\n```\n\nTo display a low-res thumbnail while high res images are loading, specify a `thumbnail` prop with `src` and `alt`\n\nAlternatively, you can provide a `product` prop as an object with `media` and `thumbnail` values that\nadhere to the formats described above.\n\n```js\n <MediaCarousel\n     media={[\n       { src: 'https://domain.com/path/to/image.jpg', alt: 'Red Shirt', type: 'image' },\n       { src: 'https://domain.com/path/to/image.mpeg', alt: 'Demonstration', type: 'video' },\n     ],\n     thumbnail: {\n       src: 'https://domain.com/path/to/thumbnail.jpg', alt: 'thumbnail'\n     }\n   }]}\n />\n```","displayName":"MediaCarousel","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"thumbnails","type":{"name":"bool"},"required":false,"description":"If `true`, the carousel will have thumbnails below it.","defaultValue":{"value":"true","computed":false}},{"name":"thumbnail","type":{"name":"shape","value":{"src":{"name":"string","required":false},"alt":{"name":"string","required":false}}},"required":false,"description":"Data for an image to be used for a thumbnail when the images are not yet loaded."},{"name":"thumbsClassName","type":{"name":"string"},"required":false,"description":"An optional `className` to use for the thumbnails component."},{"name":"lightboxClassName","type":{"name":"string"},"required":false,"description":"An optional `className` to use for the carousel component when the lightbox is open."},{"name":"thumbnailPosition","type":{"name":"enum","value":[{"value":"'bottom'","computed":false},{"value":"'top'","computed":false},{"value":"'left'","computed":false},{"value":"'right'","computed":false}]},"required":false,"description":"Position of thumbnails, relative to the main carousel image. For small screens, the position\nwill revert to `top` when this value is set to `left` or `right`.\n\nThis property will have no effect in Amp.","defaultValue":{"value":"'bottom'","computed":false}},{"name":"CarouselThumbnailsComponent","type":{"name":"elementType"},"required":false,"description":"A component type to use for the thumbnails.","defaultValue":{"value":"CarouselThumbnails","computed":true}},{"name":"magnifyHintClassName","type":{"name":"string"},"required":false,"description":"An optional `className` to use for the [`MagnifyHint`](/apiReference/carousel/MagnifyHint) component."},{"name":"imageProps","type":{"name":"object"},"required":false,"description":"Props passed through to each [`Media`](/apiReference/carousel/Media)'s\n[`imageProps`](/apiReference/carousel/Media#prop-imageProps)."},{"name":"media","type":{"name":"shape","value":{"full":{"name":"arrayOf","value":{"name":"object"},"required":false},"thumbnails":{"name":"arrayOf","value":{"name":"object"},"required":false}}},"required":false,"description":"Data for all the media objects to show in the carousel."},{"name":"magnifyProps","type":{"name":"object"},"required":false,"description":"Props passed through to each [`Media`](/apiReference/carousel/Media)'s\n[`magnifyProps`](/apiReference/carousel/Media#prop-magnifyProps).","defaultValue":{"value":"{}","computed":false}},{"name":"MediaComponent","type":{"name":"elementType"},"required":false,"description":"A component type to use for each media object in the carousel.","defaultValue":{"value":"Media","computed":true}},{"name":"lightboxProps","type":{"name":"object"},"required":false,"description":"Props passed through to the [`Lightbox`](/apiReference/carousel/Lightbox).","defaultValue":{"value":"{}","computed":false}},{"name":"id","type":{"name":"string"},"required":false,"description":"An `id` attribute to use for the carousel's root element."},{"name":"CarouselComponent","type":{"name":"elementType"},"required":false,"description":"A component type to use for the main carousel component.","defaultValue":{"value":"Carousel","computed":true}}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFMediaCarousel-root","description":"Styles applied to the root component."},{"ruleName":"rootSideThumbs","globalClass":".RSFMediaCarousel-rootSideThumbs","description":"Styles applied to the root component when `thumbnailPosition` is `left` or `right`."},{"ruleName":"mediaWrap","globalClass":".RSFMediaCarousel-mediaWrap","description":"Styles applied to the wrapper element of each media component."},{"ruleName":"thumbnail","globalClass":".RSFMediaCarousel-thumbnail","description":"Styles applied to each of the thumbnail elements."},{"ruleName":"thumbnailsLeft","globalClass":".RSFMediaCarousel-thumbnailsLeft","description":"Styles applied to the thumbnail component when thumbnailPosition is `left`."},{"ruleName":"thumbnailsTop","globalClass":".RSFMediaCarousel-thumbnailsTop","description":"Styles applied to the thumbnail component when thumbnailPosition is `top`."},{"ruleName":"lightboxCarousel","globalClass":".RSFMediaCarousel-lightboxCarousel","description":"Styles applied to the carousel component when the lightbox is shown."},{"ruleName":"lightboxThumbs","globalClass":".RSFMediaCarousel-lightboxThumbs","description":"Styles applied to the thumbnails in the lightbox."}]},"type":"component","import":"import MediaCarousel from 'react-storefront/carousel/MediaCarousel'"},"drawer/Drawer":{"name":"Drawer","filename":"Drawer","importPath":"drawer/Drawer","description":"A slide-in drawer with fab close button.","displayName":"Drawer","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"className","type":{"name":"string"},"required":false,"description":"CSS class to apply to the root element."},{"name":"children","type":{"name":"node"},"required":true,"description":"Child nodes to show inside the Drawer."},{"name":"showCloseButton","type":{"name":"bool"},"required":false,"description":"If `false`, the close button will be hidden.","defaultValue":{"value":"true","computed":false}},{"name":"fullscreen","type":{"name":"bool"},"required":false,"description":"If `true`, the drawer will cover the whole screen."},{"name":"onClose","type":{"name":"func"},"required":true,"description":"A function that is called when the user closes the drawer."},{"name":"title","type":{"name":"union","value":[{"name":"string"},{"name":"element"}]},"required":false,"description":"The title to display at the top of the drawer."},{"name":"autoAdjustBodyPadding","type":{"name":"bool"},"required":false,"description":"If `true`, padding will be automatically added to the body when the drawer\nis open so that the user is able to scroll and see all of the body content.","defaultValue":{"value":"false","computed":false}},{"name":"anchor","type":{"name":"enum","value":[{"value":"'top'","computed":false},{"value":"'bottom'","computed":false},{"value":"'left'","computed":false},{"value":"'right'","computed":false}]},"required":false,"description":"Side from which the drawer will appear (top, left, right, bottom).","defaultValue":{"value":"'bottom'","computed":false}},{"name":"variant","type":{"name":"enum","value":[{"value":"'permanent'","computed":false},{"value":"'persistent'","computed":false},{"value":"'temporary'","computed":false}]},"required":false,"description":"The variant to use for the MaterialUI [`Drawer`)(https://material-ui.com/api/drawer/#props).","defaultValue":{"value":"'temporary'","computed":false}}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFDrawer-root","description":"Styles applied to the root element."},{"ruleName":"closeButton","globalClass":".RSFDrawer-closeButton","description":"Styles applied to the close button element."},{"ruleName":"paper","globalClass":".RSFDrawer-paper","description":"Styles applied to the drawer's `Paper` component."},{"ruleName":"fullscreen","globalClass":".RSFDrawer-fullscreen","description":"Styles applied to the drawer's `Paper` component if [`fullscreen`](#prop-fullscreen) is `true`."},{"ruleName":"container","globalClass":".RSFDrawer-container","description":"Styles applied to the drawer's wrapper element."},{"ruleName":"header","globalClass":".RSFDrawer-header","description":"Styles applied to the drawer's header element."},{"ruleName":"content","globalClass":".RSFDrawer-content","description":"Styles applied to the wrapper around the drawer's children."},{"ruleName":"title","globalClass":".RSFDrawer-title","description":"Styles applied to the drawer's title element."}],"name":"Drawer"},"type":"component","import":"import Drawer from 'react-storefront/drawer/Drawer'"},"drawer/DrawerCloseButton":{"name":"DrawerCloseButton","filename":"DrawerCloseButton","importPath":"drawer/DrawerCloseButton","description":"A close button for drawers that can display text or an icon.","displayName":"DrawerCloseButton","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"className","type":{"name":"string"},"required":false,"description":"CSS class to apply to the root element."},{"name":"ampState","type":{"name":"string"},"required":false,"description":"The name of the amp state corresponding to the drawer."},{"name":"onClick","type":{"name":"func"},"required":false,"description":"Fired when the button is clicked.  Call `e.preventDefault()` on the\nprovided event to prevent the drawer from closing."},{"name":"text","type":{"name":"string"},"required":false,"description":"When set, this text will be displayed instead of an icon."},{"name":"Icon","type":{"name":"elementType"},"required":false,"description":"Overrides the default icon.","defaultValue":{"value":"ClearIcon","computed":true}},{"name":"open","type":{"name":"bool"},"required":false,"description":"If `true`, the drawer is open","defaultValue":{"value":"false","computed":false}},{"name":"fullscreen","type":{"name":"bool"},"required":false,"description":"If `true`, the drawer is fullscreen and the close button will therefore be a `Fab` button."}],"styles":{"classes":[{"ruleName":"button","globalClass":".RSFDrawerCloseButton-button","description":"Styles applied to the root element."},{"ruleName":"buttonText","globalClass":".RSFDrawerCloseButton-buttonText","description":"Styles applied to the root element, if [`text`](#prop-text) is defined."},{"ruleName":"buttonFab","globalClass":".RSFDrawerCloseButton-buttonFab","description":"Styles applied to the root element, if [`text`](#prop-text) is not defined and\n[`fullscreen`](#prop-fullscreen) is `false`."},{"ruleName":"hidden","globalClass":".RSFDrawerCloseButton-hidden","description":"Styles applied to hide the `Fab` button when [`open`](#prop-open) is `false`."}],"name":"DrawerCloseButton"},"type":"component","import":"import DrawerCloseButton from 'react-storefront/drawer/DrawerCloseButton'"},"link/Link":{"name":"Link","filename":"Link","importPath":"link/Link","description":"Use this component for all Links in your React Storefront app.  You can\npass props to display on the next page while data is loading from the server\nusing the `pageData` prop. This component accepts all props that would\nnormally be passed to a [Next.js `Link` component](https://nextjs.org/docs/api-reference/next/link).\nAll other props are spread to the underlying HTML anchor element.\n\nExample:\n\n```js\nimport Link from 'react-storefront/link/Link'\n\n<Link href=\"/p/[productId]\" as={`/p/${product.id}`} pageData={{ product }}>\n  {product.name}\n</Link>\n```","displayName":"Link","methods":[],"props":[{"name":"as","type":{"name":"string"},"required":false,"description":"The URL path for the underlying anchor element's `href`.  This is required for dynamic routes."},{"name":"href","type":{"name":"string"},"required":true,"description":"The next.js route pattern"},{"name":"prefetch","type":{"name":"enum","value":[{"value":"'always'","computed":false},{"value":"'visible'","computed":false},{"value":"false","computed":false}]},"required":false,"description":"Set to `visible` to prefetch the JSON data for the destination page component when the link\nis scrolled into the viewport.  Set to `always` to prefetch the data immediately. Set to\n`false` to never prefetch."},{"name":"prefetchURL","type":{"name":"string"},"required":false,"description":"The URL to prefetch.  If omitted, `/api/{href}` will be prefetched."},{"name":"pageData","type":{"name":"object"},"required":false,"description":"Data to be added to the `pageData` key returned by [`/hooks/useLazyState`](/apiReference/hooks/useLazyState)\nin the destination page component.  Use this to display partial data in the skeleton while the full dataset\nis fetched from the server."},{"name":"onClick","type":{"name":"func"},"required":false,"description":"An optional function to run when the Link is clicked."},{"name":"children","type":{"name":"node"},"required":false,"description":"Content children of the link element."}],"styles":{"classes":[],"name":null},"type":"component","import":"import Link from 'react-storefront/link/Link'"},"link/LinkContextProvider":{"name":"LinkContextProvider","filename":"LinkContextProvider","importPath":"link/LinkContextProvider","description":"Provides a context that allows links to pass data directly to pages via the `pageData` prop.","displayName":"LinkContextProvider","methods":[],"styles":{"classes":[],"name":null},"props":[],"type":"component","import":"import LinkContextProvider from 'react-storefront/link/LinkContextProvider'"},"menu/Menu":{"name":"Menu","filename":"Menu","importPath":"menu/Menu","description":"","displayName":"Menu","methods":[],"props":[{"name":"root","type":{"name":"object"},"required":false,"description":""},{"name":"drawerWidth","type":{"name":"number"},"required":false,"description":"The width of the drawer in pixels","defaultValue":{"value":"330","computed":false}},{"name":"rootHeader","type":{"name":"element"},"required":false,"description":"An element to display at the top of the root of the menu"},{"name":"rootFooter","type":{"name":"element"},"required":false,"description":"An element to display at the bottom of the root of the menu"},{"name":"renderHeader","type":{"name":"func"},"required":false,"description":"A function to render a custom header in menu cards.  It is passed an object\nwith:\n\n- item: The menu item record being rendered\n\nThe function should return a React element or fragment."},{"name":"renderFooter","type":{"name":"func"},"required":false,"description":"A function to render a custom footer menu cards.  It is passed an object\nwith:\n\n- item: The menu item record being rendered\n\nThe function should return a React element or fragment."},{"name":"open","type":{"name":"bool"},"required":false,"description":"Set to true to display the menu"},{"name":"persistent","type":{"name":"bool"},"required":false,"description":"Set to true to dock the menu so that it's always open and not modal"},{"name":"classes","type":{"name":"objectOf","value":{"name":"string"}},"required":false,"description":"CSS classes for this component"},{"name":"onClose","type":{"name":"func"},"required":false,"description":"Called when the menu is closed"},{"name":"ExpandIcon","type":{"name":"elementType"},"required":false,"description":"The icon to use for collapsed groups"},{"name":"CollapseIcon","type":{"name":"elementType"},"required":false,"description":"The icon to use for expanded groups"},{"name":"anchor","type":{"name":"enum","value":[{"value":"'left'","computed":false},{"value":"'right'","computed":false}]},"required":false,"description":"Sets the side of the screen from which the menu appears.","defaultValue":{"value":"'left'","computed":false}},{"name":"renderItem","type":{"name":"func"},"required":false,"description":"Overrides the default rendering of a menu item.  It is passed the following arguments:\n\n- item - the menu item record being rendered.\n\nReturn undefined to render the default contents\n\nExample:\n\n```js\n renderItem={item => {\n   return item.text === 'My Special Item ? <MySpecialItem/> : null\n }}\n```"},{"name":"renderItemContent","type":{"name":"func"},"required":false,"description":"Overrides the content of a menu item.  It is passed the following arguments:\n\n- item - the menu item record being rendered.\n\nReturn null to render the default contents\n\nExample:\n\n```js\n renderItemContent={item => {\n   return leaf ? <ListItemText primary={item.text}/> : null\n }}\n```"},{"name":"trackSelected","type":{"name":"bool"},"required":false,"description":"Set to `true` to show the item corresponding to the current URL as selected.","defaultValue":{"value":"false","computed":false}},{"name":"renderDrawer","type":{"name":"func"},"required":false,"description":"A function to override the rendering the drawer"},{"name":"DrawerComponent","defaultValue":{"value":"Drawer","computed":true},"required":false}],"styles":{"classes":[{"ruleName":"drawer","globalClass":".RSFMenu-drawer","description":""},{"ruleName":"list","globalClass":".RSFMenu-list","description":""},{"ruleName":"listPadding","globalClass":".RSFMenu-listPadding","description":""},{"ruleName":"header","globalClass":".RSFMenu-header","description":""},{"ruleName":"icon","globalClass":".RSFMenu-icon","description":""},{"ruleName":"headerText","globalClass":".RSFMenu-headerText","description":""},{"ruleName":"bodyWrap","globalClass":".RSFMenu-bodyWrap","description":""},{"ruleName":"hidden","globalClass":".RSFMenu-hidden","description":""},{"ruleName":"visible","globalClass":".RSFMenu-visible","description":""},{"ruleName":"link","globalClass":".RSFMenu-link","description":""},{"ruleName":"leaf","globalClass":".RSFMenu-leaf","description":""},{"ruleName":"drawerFixed","globalClass":".RSFMenu-drawerFixed","description":""}]},"type":"component","import":"import Menu from 'react-storefront/menu/Menu'"},"menu/MenuBack":{"name":"MenuBack","filename":"MenuBack","importPath":"menu/MenuBack","description":"","displayName":"MenuBack","methods":[],"props":[{"name":"goBack","type":{"name":"func"},"required":false,"description":"Goes back to the previous item in the menu hierarchy"},{"name":"item","type":{"name":"shape","value":{"text":{"name":"string","required":false}}},"required":true,"description":"The menu item being rendered"}],"styles":{"classes":[],"name":null},"type":"component","import":"import MenuBack from 'react-storefront/menu/MenuBack'"},"menu/MenuBody":{"name":"MenuBody","filename":"MenuBody","importPath":"menu/MenuBody","description":"","displayName":"MenuBody","methods":[],"props":[{"name":"wrapProps","type":{"name":"object"},"required":false,"description":"Additional props for the wrap element","defaultValue":{"value":"{}","computed":false}},{"name":"CardComponent","type":{"name":"elementType"},"required":false,"description":"Overrides the default component used to display menu cards","defaultValue":{"value":"MenuCard","computed":true}}],"styles":{"classes":[],"name":null},"type":"component","import":"import MenuBody from 'react-storefront/menu/MenuBody'"},"menu/MenuBranch":{"name":"MenuBranch","filename":"MenuBranch","importPath":"menu/MenuBranch","description":"","displayName":"MenuBranch","methods":[],"props":[{"name":"ExpanderComponent","type":{"name":"elementType"},"required":false,"description":"Overrides the default component for expandable items","defaultValue":{"value":"ExpandableSection","computed":true}},{"name":"itemProps","type":{"name":"object"},"required":false,"description":"Additional props for the underlying ListItem"}],"styles":{"classes":[{"ruleName":"expander","globalClass":".RSFMenuBranch-expander","description":""},{"ruleName":"expanderMargins","globalClass":".RSFMenuBranch-expanderMargins","description":""},{"ruleName":"expanderSummary","globalClass":".RSFMenuBranch-expanderSummary","description":""},{"ruleName":"expanderSummaryExpanded","globalClass":".RSFMenuBranch-expanderSummaryExpanded","description":""},{"ruleName":"expanderIconExpanded","globalClass":".RSFMenuBranch-expanderIconExpanded","description":""},{"ruleName":"expanderDetails","globalClass":".RSFMenuBranch-expanderDetails","description":""},{"ruleName":"expanderContent","globalClass":".RSFMenuBranch-expanderContent","description":""}]},"type":"component","import":"import MenuBranch from 'react-storefront/menu/MenuBranch'"},"menu/MenuButton":{"name":"MenuButton","filename":"MenuButton","importPath":"menu/MenuButton","description":"The button that controls that opens and closes the main app menu.","displayName":"MenuButton","methods":[],"props":[{"name":"MenuIcon","type":{"name":"elementType"},"required":false,"description":"A react component to use for the menu icon","defaultValue":{"value":"MenuIcon","computed":true}},{"name":"menuIconProps","type":{"name":"object"},"required":false,"description":"Props for the menu icon","defaultValue":{"value":"{}","computed":false}}],"styles":{"classes":[{"ruleName":"link","globalClass":".RSFMenuButton-link","description":""}],"name":"MenuButton"},"type":"component","import":"import MenuButton from 'react-storefront/menu/MenuButton'"},"menu/MenuCard":{"name":"MenuCard","filename":"MenuCard","importPath":"menu/MenuCard","description":"","displayName":"MenuCard","methods":[],"props":[{"name":"headerProps","type":{"name":"object"},"required":false,"description":"Addition props for the header element"}],"styles":{"classes":[],"name":null},"type":"component","import":"import MenuCard from 'react-storefront/menu/MenuCard'"},"menu/MenuExpanderIcon":{"name":"MenuExpanderIcon","filename":"MenuExpanderIcon","importPath":"menu/MenuExpanderIcon","description":"","displayName":"ExpanderIcon","methods":[],"styles":{"classes":[],"name":null},"props":[],"type":"component","import":"import MenuExpanderIcon from 'react-storefront/menu/MenuExpanderIcon'"},"menu/MenuFooter":{"name":"MenuFooter","filename":"MenuFooter","importPath":"menu/MenuFooter","description":"","displayName":"MenuFooter","methods":[],"props":[{"name":"item","type":{"name":"object"},"required":false,"description":"The menu item record"}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFMenuFooter-root","description":""}],"name":"MenuFooter"},"type":"component","import":"import MenuFooter from 'react-storefront/menu/MenuFooter'"},"menu/MenuHeader":{"name":"MenuHeader","filename":"MenuHeader","importPath":"menu/MenuHeader","description":"","displayName":"MenuHeader","methods":[],"props":[{"name":"item","type":{"name":"object"},"required":false,"description":"The menu item record"}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFMenuHeader-root","description":""}],"name":"MenuHeader"},"type":"component","import":"import MenuHeader from 'react-storefront/menu/MenuHeader'"},"menu/MenuIcon":{"name":"MenuIcon","filename":"MenuIcon","importPath":"menu/MenuIcon","description":"A menu icon that animates transitions between open and closed states.","displayName":"MenuIcon","methods":[],"props":[{"name":"open","type":{"name":"bool"},"required":false,"description":"Set to true when the menu is open, otherwise false","defaultValue":{"value":"false","computed":false}},{"name":"label","type":{"name":"bool"},"required":false,"description":"Set to `false` to hide the text \"menu\" underneath the button when the menu is closed.","defaultValue":{"value":"false","computed":false}}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFMenuIcon-root","description":""},{"ruleName":"active","globalClass":".RSFMenuIcon-active","description":""},{"ruleName":"withLabel","globalClass":".RSFMenuIcon-withLabel","description":""},{"ruleName":"hidden","globalClass":".RSFMenuIcon-hidden","description":""},{"ruleName":"visible","globalClass":".RSFMenuIcon-visible","description":""},{"ruleName":"label","globalClass":".RSFMenuIcon-label","description":""}],"name":"MenuIcon"},"type":"component","import":"import MenuIcon from 'react-storefront/menu/MenuIcon'"},"menu/MenuItemContent":{"name":"MenuItemContent","filename":"MenuItemContent","importPath":"menu/MenuItemContent","description":"","displayName":"MenuItemContent","methods":[],"props":[{"name":"listItemProps","type":{"name":"object"},"required":false,"description":"Additional props for the underlying ListItem"}],"styles":{"classes":[{"ruleName":"listItem","globalClass":".RSFMenuItemContent-listItem","description":""},{"ruleName":"listItemImage","globalClass":".RSFMenuItemContent-listItemImage","description":""},{"ruleName":"listItemIcon","globalClass":".RSFMenuItemContent-listItemIcon","description":""},{"ruleName":"loadingIcon","globalClass":".RSFMenuItemContent-loadingIcon","description":""}],"name":"MenuItemContent"},"type":"component","import":"import MenuItemContent from 'react-storefront/menu/MenuItemContent'"},"menu/MenuLeaf":{"name":"MenuLeaf","filename":"MenuLeaf","importPath":"menu/MenuLeaf","description":"","displayName":"MenuLeaf","methods":[],"styles":{"classes":[],"name":null},"props":[],"type":"component","import":"import MenuLeaf from 'react-storefront/menu/MenuLeaf'"},"menu/SEOLinks":{"name":"SEOLinks","filename":"SEOLinks","importPath":"menu/SEOLinks","description":"","displayName":"SEOLinks","methods":[],"styles":{"classes":[],"name":null},"props":[],"type":"component","import":"import SEOLinks from 'react-storefront/menu/SEOLinks'"},"nav/NavTab":{"name":"NavTab","filename":"NavTab","importPath":"nav/NavTab","description":"A single navigational tab, which links to another page in the app based on the `as` and `href` props.\nChildren are displayed in a menu that is shown on mouse over on desktop devices.\n\nExample:\n\n```js\n <NavTab href=\"/c/[categoryId]\" as=\"/c/shirts\" label=\"Shirts\">\n   <div style={{ padding: 20 }}>\n     <Link href=\"/s/[subcategoryId]\" as=\"/s/long-sleeve-shirts\">Long Sleeve Shirts</Link>\n     <Link href=\"/s/[subcategoryId]\" as=\"/s/turtlenecks\">Turtlenecks</Link>\n     <Link href=\"/s/[subcategoryId]\" as=\"/s/tees\">Tee Shirts</Link>\n   </div>\n </NavTab>\n```\n\nAccessibility:\n\nThis component supports keyboard navigation.  The user can open the menu by pressing the enter key when the `NavTab` is focused.","displayName":"NavTab","methods":[],"props":[{"name":"as","type":{"name":"string"},"required":true,"description":"The link path"},{"name":"href","type":{"name":"string"},"required":true,"description":"The next.js route pattern"},{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."}],"styles":{"classes":[],"name":null},"type":"component","import":"import NavTab from 'react-storefront/nav/NavTab'"},"nav/NavTabs":{"name":"NavTabs","filename":"NavTabs","importPath":"nav/NavTabs","description":"Scrollable navigation tabs for the top of the app. All extra props are spread to the\nunderlying Material UI Tabs element.  When a tab is clicked, the \"top_nav_clicked\" analytics\nevent is fired.","displayName":"NavTabs","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details.","defaultValue":{"value":"{}","computed":false}},{"name":"children","type":{"name":"node"},"required":false,"description":"Child tabs."}],"styles":{"classes":[{"ruleName":"indicatorNoSelection","globalClass":".RSFNavTabs-indicatorNoSelection","description":"Styles applied to the root element when no tab is selected."},{"ruleName":"scrollButtons","globalClass":".RSFNavTabs-scrollButtons","description":"Styles passed through to the `scrollButtons` rule in [`Tabs`](https://material-ui.com/api/tabs/#css)'."},{"ruleName":"root","globalClass":".RSFNavTabs-root","description":"Styles applied to the root [`Tabs`](https://material-ui.com/api/tabs/) component."},{"ruleName":"ripple","globalClass":".RSFNavTabs-ripple","description":"Styles applied to the root element of the[`Tabs`](https://material-ui.com/api/tabs/)'\n`ScrollButtonComponent` component."}],"name":"NavTabs"},"type":"component","import":"import NavTabs from 'react-storefront/nav/NavTabs'"},"option/ProductOption":{"name":"ProductOption","filename":"ProductOption","importPath":"option/ProductOption","description":"A button or swatch that displays a representation of a product option within a\n[`ProductOptionSelector`](/apiReference/option/ProductOptionSelector].","displayName":"ProductOption","methods":[],"props":[{"name":"variant","type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'swatch'","computed":false}]},"required":true,"description":"The UI variant that controls how the option is displayed."},{"name":"showLabel","type":{"name":"bool"},"required":false,"description":"Set to `false` to hide the label text.","defaultValue":{"value":"true","computed":false}},{"name":"selectedClassName","type":{"name":"string"},"required":false,"description":"The CSS class name applied to a selected option.","defaultValue":{"value":"'rsf-po-selected'","computed":false}},{"name":"value","type":{"name":"object"},"required":false,"description":"The value for the product option."},{"name":"selected","type":{"name":"bool"},"required":false,"description":"If `true`, this option is the selected option."},{"name":"selectedOption","type":{"name":"object"},"required":false,"description":"An alternative to using [`selected`](#prop-selected), this is a value that will be tested against\nthe [`value`](#prop-value) prop to determine if this option is selected."},{"name":"onSelectedOptionChange","type":{"name":"func"},"required":false,"description":"Called when the selected option is changed."},{"name":"onClick","type":{"name":"func"},"required":false,"description":"Called with this option is clicked."},{"name":"wrapperProps","type":{"name":"func"},"required":false,"description":"A function that returns props to pass to the wrapper element.","defaultValue":{"value":"Function.prototype","computed":true}},{"name":"optionProps","type":{"name":"func"},"required":false,"description":"A function that returns props to pass to the option element.","defaultValue":{"value":"Function.prototype","computed":true}}],"styles":{"classes":[],"name":null},"type":"component","import":"import ProductOption from 'react-storefront/option/ProductOption'"},"option/ProductOptionSelector":{"name":"ProductOptionSelector","filename":"ProductOptionSelector","importPath":"option/ProductOptionSelector","description":"A selector for product options rendered as a set of buttons. Buttons can either have\ntext or an image. The text for the selected option can optionally be displayed below\nthe buttons.\n\nThis component supports AMP.","displayName":"ProductOptionSelector","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"imageProps","type":{"name":"object"},"required":false,"description":"Props for displayed images. See <Image /> component for details","defaultValue":{"value":"{}","computed":false}},{"name":"name","type":{"name":"string"},"required":false,"description":"The name of property in amp state to bind to"},{"name":"onChange","type":{"name":"func"},"required":false,"description":"Function to call when a new option is selected. Called with the new selected\noption or `null` when a selected option is deselected."},{"name":"optionProps","type":{"name":"object"},"required":false,"description":"Props to apply to each `SwatchProductOption` or `TextProductOption` element.","defaultValue":{"value":"{}","computed":false}},{"name":"skeleton","type":{"name":"number"},"required":false,"description":"If specified, this number of skeleton buttons will be displayed instead of\ndisplaying the actual buttons."},{"name":"value","type":{"name":"object"},"required":false,"description":"Current selected value among provided options or `null` when no option is selected."},{"name":"OptionComponent","type":{"name":"elementType"},"required":false,"description":"Allows you to override the default component which is used to render a product option.","defaultValue":{"value":"ProductOption","computed":true}},{"name":"items","defaultValue":{"value":"[]","computed":false},"required":false}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFProductOptionSelector-root","description":""},{"ruleName":"button","globalClass":".RSFProductOptionSelector-button","description":""}],"name":"ProductOptionSelector"},"type":"component","import":"import ProductOptionSelector from 'react-storefront/option/ProductOptionSelector'"},"option/SwatchProductOption":{"name":"SwatchProductOption","filename":"SwatchProductOption","importPath":"option/SwatchProductOption","description":"A variant of [`ProductOption`](/apiReference/option/ProductOption] that shows an image swatch to\nrepresent a product option.","displayName":"SwatchProductOption","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"className","type":{"name":"string"},"required":false,"description":"A CSS class to apply to the option."},{"name":"label","type":{"name":"union","value":[{"name":"string"},{"name":"element"}]},"required":false,"description":"Text to display below the button."},{"name":"imageProps","type":{"name":"shape","value":"Image.propTypes","computed":true},"required":false,"description":"Props for the `Image` element.","defaultValue":{"value":"{}","computed":false}},{"name":"size","type":{"name":"enum","value":[{"value":"'default'","computed":false},{"value":"'small'","computed":false},{"value":"'tiny'","computed":false}]},"required":false,"description":"Controls the size of the button.","defaultValue":{"value":"'default'","computed":false}},{"name":"ImageComponent","type":{"name":"elementType"},"required":false,"description":"The component type to use to display images.","defaultValue":{"value":"Image","computed":true}},{"name":"selected","type":{"name":"bool"},"required":false,"description":"If `true`, this option is selected."},{"name":"onClick","type":{"name":"func"},"required":false,"description":"A function to call when this option is clicked."},{"name":"SelectedIcon","type":{"name":"elementType"},"required":false,"description":"An icon component type to display for when this option is selected.","defaultValue":{"value":"CheckedIcon","computed":true}},{"name":"skeleton","type":{"name":"bool"},"required":false,"description":"If `true`, show this option as just a skeleton."},{"name":"buttonProps","type":{"name":"object"},"required":false,"description":"Props to pass to the button element.","defaultValue":{"value":"{}","computed":false}}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFSwatchProductOption-root","description":"Styles applied to the root element."},{"ruleName":"button","globalClass":".RSFSwatchProductOption-button","description":"Styles applied to the button element."},{"ruleName":"image","globalClass":".RSFSwatchProductOption-image","description":"Styles applied to the image element."},{"ruleName":"checkMark","globalClass":".RSFSwatchProductOption-checkMark","description":"Styles applied to the wrapper element of the selected icon."},{"ruleName":"selected","globalClass":".RSFSwatchProductOption-selected","description":"Styles applied to the wrapper element of the selected icon when this option is selected."},{"ruleName":"selectedLabel","globalClass":".RSFSwatchProductOption-selectedLabel","description":"Styles applied to the label element when this option is selected."},{"ruleName":"default","globalClass":".RSFSwatchProductOption-default","description":"Styles applied to the skeleton and button elements when [`size`](#prop-size) is `'default'`."},{"ruleName":"small","globalClass":".RSFSwatchProductOption-small","description":"Styles applied to the skeleton and button elements when [`size`](#prop-size) is `'small'`."},{"ruleName":"tiny","globalClass":".RSFSwatchProductOption-tiny","description":"Styles applied to the skeleton and button elements when [`size`](#prop-size) is `'tiny'`."}],"name":"SwatchProductOption"},"type":"component","import":"import SwatchProductOption from 'react-storefront/option/SwatchProductOption'"},"option/TextProductOption":{"name":"TextProductOption","filename":"TextProductOption","importPath":"option/TextProductOption","description":"Represents a single product option value as a button with text. All additional\nprops are spread to the underlying Material UI Button component.\n\nExample:\n\n```js\n<TextProductOption label=\"SM\" selected />\n```","displayName":"TextProductOption","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"className","type":{"name":"string"},"required":false,"description":"A CSS class to apply to the option."},{"name":"skeleton","type":{"name":"bool"},"required":false,"description":"Set to `true` to display a skeleton instead of the actual button."},{"name":"label","type":{"name":"union","value":[{"name":"string"},{"name":"element"}]},"required":true,"description":"The text for the button."},{"name":"selected","type":{"name":"bool"},"required":false,"description":"Set to `true` to mark the option as selected.","defaultValue":{"value":"false","computed":false}},{"name":"imageProps","type":{"name":"object"},"required":false,"description":"This prop is intentionally ignored so that `TextProductOption` can be used interchangeably with\n`SwatchProductOption without` displaying a warning."},{"name":"buttonProps","type":{"name":"object"},"required":false,"description":"Props to pass to the button element."},{"name":"onClick","type":{"name":"func"},"required":false,"description":"A function to call when this option is clicked."}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFTextProductOption-root","description":"Styles applied to the root element."}],"name":"TextProductOption"},"type":"component","import":"import TextProductOption from 'react-storefront/option/TextProductOption'"},"plp/Filter":{"name":"Filter","filename":"Filter","importPath":"plp/Filter","description":"UI for filtering a list of products.  This component can be used on its own, or you can use\n[`FilterButton`](/apiReference/plp/FilterButton) to automatically display this component in a\ndrawer that slides up from the bottom of the viewport.","displayName":"Filter","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"onViewResultsClick","type":{"name":"func"},"required":false,"description":"A function to call when the user clicks the button to view updated results.  The default behavior can be\ncanceled by calling `preventDefault` on the passed in event.  The event is passed as the only argument.","defaultValue":{"value":"Function.prototype","computed":true}},{"name":"queryParam","type":{"name":"string"},"required":false,"description":"The query string parameter that should be updated when filters are changed.  The value will be an array\nof codes for each selected facet."},{"name":"title","type":{"name":"string"},"required":false,"description":"An optional title to display at the top of the component."},{"name":"expandAll","type":{"name":"bool"},"required":false,"description":"Set to `true` to expand all groups on initial render."},{"name":"submitOnChange","type":{"name":"bool"},"required":false,"description":"Set to `true` to refresh the results when the user toggles a filter.","defaultValue":{"value":"false","computed":false}},{"name":"hideClearLink","type":{"name":"bool"},"required":false,"description":"If `true`, the clear link is hidden."},{"name":"clearLinkText","type":{"name":"string"},"required":false,"description":"Text to use for the clear link."},{"name":"style","type":{"name":"object"},"required":false,"description":"CSS styles to add to the root component."}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFFilter-root","description":"Styles applied to the root element."},{"ruleName":"facetGroups","globalClass":".RSFFilter-facetGroups","description":"Styles applied to the wrapper element around the facet groups."}]},"type":"component","import":"import Filter from 'react-storefront/plp/Filter'"},"plp/FilterButton":{"name":"FilterButton","filename":"FilterButton","importPath":"plp/FilterButton","description":"A button that when clicked, opens a drawer containing the `Filter` view. Current filters\nare displayed in the button text.","displayName":"FilterButton","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"drawerProps","type":{"name":"object"},"required":false,"description":"Props for the underlying `Filter` component.","defaultValue":{"value":"{}","computed":false}},{"name":"title","type":{"name":"string"},"required":false,"description":"The label for the button and the drawer header.","defaultValue":{"value":"'Filter'","computed":false}},{"name":"href","type":{"name":"string"},"required":false,"description":"When specified, clicking the button will navigate to the specified URL with a full page reload."},{"name":"onClick","type":{"name":"func"},"required":false,"description":"A function that will be called when the button is clicked."}],"styles":{"classes":[{"ruleName":"drawer","globalClass":".RSFFilterButton-drawer","description":"Styles applied to the drawer element."}]},"type":"component","import":"import FilterButton from 'react-storefront/plp/FilterButton'"},"plp/FilterFooter":{"name":"FilterFooter","filename":"FilterFooter","importPath":"plp/FilterFooter","description":"A footer to be placed at the bottom of the [`Filter`](/apiReference/plp/Filter).","displayName":"FilterFooter","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"submitOnChange","type":{"name":"bool"},"required":false,"description":"Set to `true` if the filters will be submitted when changed. In this case, the footer will not be shown."},{"name":"onViewResultsClick","type":{"name":"func"},"required":false,"description":"Function to call when the \"View Results\" button is clicked."}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFFilterFooter-root","description":"Styles applied to the root element."},{"ruleName":"itemsFound","globalClass":".RSFFilterFooter-itemsFound","description":"Styles applied to the \"# items found\" label."}],"name":"FilterFooter"},"type":"component","import":"import FilterFooter from 'react-storefront/plp/FilterFooter'"},"plp/SearchResultsProvider":{"name":"SearchResultsProvider","filename":"SearchResultsProvider","importPath":"plp/SearchResultsProvider","description":"Provides context to filter, sorting, and pagination components.\n\n```js\n import useSearchResultsStore from 'react-storefront/plp/useSearchResultsStore'\n import SearchResultsProvider from 'react-storefront/plp/SearchResultsProvider'\n import FilterButton from 'react-storefront/plp/FilterButton'\n\n function Subcategory(lazyProps) {\n   const [store, updateStore] = useSearchResultsStore(lazyProps)\n\n   return (\n     <SearchResultsProvider store={store}>\n       <FilterButton/>\n     </SearchResultsProvider>\n   )\n }\n```","displayName":"SearchResultsProvider","methods":[],"props":[{"name":"store","type":{"name":"object"},"required":true,"description":"A store returned from [`useSearchResultsStore`](/apiReference/plp/useSearchResultsStore)."},{"name":"updateStore","type":{"name":"func"},"required":true,"description":"The update function returned from [`useSearchResultsStore`](/apiReference/plp/useSearchResultsStore)."}],"styles":{"classes":[],"name":null},"type":"component","import":"import SearchResultsProvider from 'react-storefront/plp/SearchResultsProvider'"},"plp/ShowMore":{"name":"ShowMore","filename":"ShowMore","importPath":"plp/ShowMore","description":"A control that handles loading the next page of results in a search results\npage or PLP.  This component can either display a \"Show More\" button:\n\n```js\n<ShowMore variant=\"button\"/>\n```\n... or can produce an \"infinite scroll\" effect that loads more records when the user\nscrolls within a configured offset from the bottom of the page:\n\n```js\n<ShowMore variant=\"infinite\" infiniteLoadOffset={200}/>\n```\n\nThis component should always be used inside a `<SearchResultsProvider/>`.\n\nThis component relies on the following properties being defined in `pageData` in the page store:\n\n* `page` - The current page number\n* `totalPages` - The total number of pages","displayName":"ShowMore","methods":[],"props":[{"name":"renderLoadingIcon","type":{"name":"func"},"required":false,"description":"A renderer for the loading icon.  Uses `<CircularProgress />` by default.","defaultValue":{"value":"() => <CircularProgress />","computed":false}},{"name":"variant","type":{"name":"enum","value":[{"value":"'button'","computed":false},{"value":"'infinite'","computed":false}]},"required":false,"description":"Which variant to use. One of `'button'` or `'infinite'`.\n\nWhen variant is set to `'button'`:\n  A button is rendered with contents of `{props.children}` or `'Show More'`.\n\nWhen variant is set to `'infinite'`:\n  The loading icon is rendered and contents of next page loaded when user\n  scrolls to the end of the page.\n\nIn AMP the `'button'` variant is always used.","defaultValue":{"value":"'button'","computed":false}},{"name":"infiniteLoadOffset","type":{"name":"number"},"required":false,"description":"Minimum amount of pixels from the bottom of the page to where the user has\nscrolled before the new page is loaded. Used in conjunction with `'infinite'`\nvariant. Defaults to 200.","defaultValue":{"value":"200","computed":false}},{"name":"href","type":{"name":"string"},"required":false,"description":"When specified, clicking the button will navigate to the specified URL with a full page reload."},{"name":"className","type":{"name":"string"},"required":false,"description":"A CSS class to apply to the root element."},{"name":"style","type":{"name":"object"},"required":false,"description":"CSS styles to be added to the root element."}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFShowMore-root","description":"Styles applied to the root element."},{"ruleName":"button","globalClass":".RSFShowMore-button","description":"Styles applied to the button element."},{"ruleName":"loading","globalClass":".RSFShowMore-loading","description":"Styles applied to the loading icon."}],"name":"ShowMore"},"type":"component","import":"import ShowMore from 'react-storefront/plp/ShowMore'"},"plp/Sort":{"name":"Sort","filename":"Sort","importPath":"plp/Sort","description":"UI for sorting a list of products.  This component can be used on its own, or you can use\n[`SortButton`](/apiReference/plp/SortButton) to automatically display this component in a drawer\nthat slides up from the bottom of the viewport.","displayName":"Sort","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"onSelect","type":{"name":"func"},"required":false,"description":"A function to call when a sort option is selected.  The option and event are passed.\nThe default behavior can be prevented by called `preventDefault()` on the passed in event.","defaultValue":{"value":"Function.prototype","computed":true}},{"name":"variant","type":{"name":"enum","value":[{"value":"'menu-items'","computed":false},{"value":"'buttons'","computed":false}]},"required":false,"description":"Controls how sort options are displayed.","defaultValue":{"value":"'buttons'","computed":false}}],"styles":{"classes":[{"ruleName":"container","globalClass":".RSFSort-container","description":"Styles applied to the root container if [`variant`](#prop-variant) is `'buttons'`."},{"ruleName":"option","globalClass":".RSFSort-option","description":"Styles applied to each option if [`variant`](#prop-variant) is `'buttons'`."}]},"type":"component","import":"import Sort from 'react-storefront/plp/Sort'"},"plp/SortButton":{"name":"SortButton","filename":"SortButton","importPath":"plp/SortButton","description":"A button that when clicked, opens a drawer containing the `Sort` view. The name of the currently\nselected sort option is displayed in the button text.","displayName":"SortButton","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"drawerProps","type":{"name":"object"},"required":false,"description":"Props to pass to the underlying `Drawer` component.","defaultValue":{"value":"{}","computed":false}},{"name":"sortProps","type":{"name":"object"},"required":false,"description":"Props to pass to the underlying [`Sort`](/apiReference/plp/Sort) component.","defaultValue":{"value":"{}","computed":false}},{"name":"title","type":{"name":"string"},"required":false,"description":"Text for the button label and the drawer header.","defaultValue":{"value":"'Sort'","computed":false}},{"name":"drawerBreakpoint","type":{"name":"enum","value":[{"value":"'xs'","computed":false},{"value":"'sm'","computed":false},{"value":"'md'","computed":false},{"value":"'lg'","computed":false},{"value":"'xl'","computed":false}]},"required":false,"description":"The breakpoint in your theme below which a drawer UI should be used in favor of the menu UI.","defaultValue":{"value":"'xs'","computed":false}},{"name":"href","type":{"name":"string"},"required":false,"description":"When specified, clicking the button will navigate to the specified URL with a full page reload."},{"name":"onCLick","type":{"name":"func"},"required":false,"description":"A function that is called when the button is clicked."}],"styles":{"classes":[],"name":null},"type":"component","import":"import SortButton from 'react-storefront/plp/SortButton'"},"search/SearchButton":{"name":"SearchButton","filename":"SearchButton","importPath":"search/SearchButton","description":"A button that can be used to open a search drawer.","displayName":"SearchButton","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"children","type":{"name":"node"},"required":false,"description":"Optional content to use for the button contents. If empty, a search icon is used."}],"styles":{"classes":[{"ruleName":"icon","globalClass":".RSFSearchButton-icon","description":"Styles applied to the icon, if [children](#prop-children) is empty."},{"ruleName":"large","globalClass":".RSFSearchButton-large","description":"Styles applied to the element containing the button's label."}],"name":"SearchButton"},"type":"component","import":"import SearchButton from 'react-storefront/search/SearchButton'"},"search/SearchDrawer":{"name":"SearchDrawer","filename":"SearchDrawer","importPath":"search/SearchDrawer","description":"","displayName":"SearchDrawer","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"children","type":{"name":"node"},"required":false,"description":"Children to be rendered inside the drawer."},{"name":"open","type":{"name":"bool"},"required":false,"description":"If `true`, the search drawer should be open."},{"name":"onClose","type":{"name":"func"},"required":true,"description":"A function that is called when the user closes the drawer."},{"name":"DrawerComponent","type":{"name":"elementType"},"required":false,"description":"A component type to use for the drawer.","defaultValue":{"value":"Drawer","computed":true}}],"styles":{"classes":[],"name":null},"type":"component","import":"import SearchDrawer from 'react-storefront/search/SearchDrawer'"},"search/SearchField":{"name":"SearchField","filename":"SearchField","importPath":"search/SearchField","description":"A search text field. Additional props are spread to the underlying\n[Input](https://material-ui.com/api/input/).","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"SubmitButtonComponent","type":{"name":"elementType"},"required":false,"description":"The component to use for the submit button.","defaultValue":{"value":"SearchSubmitButton","computed":true}},{"name":"submitButtonVariant","type":{"name":"enum","value":[{"value":"'icon'","computed":false},{"value":"'fab'","computed":false},{"value":"'none'","computed":false}]},"required":false,"description":"The type of submit button to display.","defaultValue":{"value":"'fab'","computed":false}},{"name":"showClearButton","type":{"name":"bool"},"required":false,"description":"If `true`, show the clear button when text is entered.","defaultValue":{"value":"true","computed":false}},{"name":"clearButtonProps","type":{"name":"object"},"required":false,"description":"Additional props for the clear button."},{"name":"inputProps","type":{"name":"object"},"required":false,"description":"Additional props for the Material UI [Input](https://material-ui.com/api/input/)."},{"name":"submitButtonProps","type":{"name":"object"},"required":false,"description":"Additional props for the submit button."},{"name":"onChange","type":{"name":"func"},"required":false,"description":"A function to call when the search query value is changed."},{"name":"value","type":{"name":"string"},"required":false,"description":"Input value.","defaultValue":{"value":"''","computed":false}},{"name":"onFocus","type":{"name":"func"},"required":false,"description":"A function to call when input is focused."},{"name":"placeholder","defaultValue":{"value":"'Search...'","computed":false},"required":false},{"name":"name","defaultValue":{"value":"'q'","computed":false},"required":false}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFSearchField-root","description":"Styles applied to the root element."},{"ruleName":"inputWrap","globalClass":".RSFSearchField-inputWrap","description":"Styles applied to the wrapper element."},{"ruleName":"input","globalClass":".RSFSearchField-input","description":"Styles applied to the input element."},{"ruleName":"inputClearIcon","globalClass":".RSFSearchField-inputClearIcon","description":"Styles applied to the input if showClearnButton prop is true."},{"ruleName":"searchFab","globalClass":".RSFSearchField-searchFab","description":"Styles applied to the submit button element if [submitButtonVariant](#prop-submitButtonVariant)\nis `'fab'`."},{"ruleName":"hidden","globalClass":".RSFSearchField-hidden","description":"Styles applied to the clear and submit buttons if the search field is empty."}]},"type":"component","import":"import SearchField from 'react-storefront/search/SearchField'"},"search/SearchForm":{"name":"SearchForm","filename":"SearchForm","importPath":"search/SearchForm","description":"A form used to submit a search query.","displayName":"SearchForm","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"children","type":{"name":"node"},"required":false,"description":"Children to be rendered inside the form."},{"name":"action","type":{"name":"string"},"required":false,"description":"An `action` attribute to use for the `<form>` element.","defaultValue":{"value":"'/search'","computed":false}},{"name":"autoComplete","type":{"name":"bool"},"required":false,"description":"Form auto complete","defaultValue":{"value":"false","computed":false}}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFSearchForm-root","description":"Styles applied to the root element."}],"name":"SearchForm"},"type":"component","import":"import SearchForm from 'react-storefront/search/SearchForm'"},"search/SearchHeader":{"name":"SearchHeader","filename":"SearchHeader","importPath":"search/SearchHeader","description":"A element to be placed at the top of a [SearchDrawer](/apiReference/search/SearchDrawer).","displayName":"SearchHeader","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"children","type":{"name":"node"},"required":false,"description":"Children to be rendered inside the header."}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFSearchHeader-root","description":"Styles applied to the root element."}],"name":"SearchHeader"},"type":"component","import":"import SearchHeader from 'react-storefront/search/SearchHeader'"},"search/SearchPopover":{"name":"SearchPopover","filename":"SearchPopover","importPath":"search/SearchPopover","description":"","displayName":"SearchPopover","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"children","type":{"name":"node"},"required":false,"description":"A list of `ExpandableSection`s that will be controlled."},{"name":"open","type":{"name":"bool"},"required":false,"description":"Boolean, which controls if popover is open."},{"name":"onClose","type":{"name":"func"},"required":false,"description":"Function, which is triggered on navigation and popover close."},{"name":"anchor","type":{"name":"shape","value":{"current":{"name":"any","required":false}}},"required":false,"description":"Popover anchor"},{"name":"setQuery","type":{"name":"func"},"required":false,"description":"Function, for setting query to empty after navigation"}],"styles":{"classes":[],"name":null},"type":"component","import":"import SearchPopover from 'react-storefront/search/SearchPopover'"},"search/SearchProvider":{"name":"SearchProvider","filename":"SearchProvider","importPath":"search/SearchProvider","description":"","displayName":"SearchProvider","methods":[],"props":[{"name":"open","type":{"name":"bool"},"required":false,"description":""},{"name":"initialGroups","type":{"name":"array"},"required":false,"description":""}],"styles":{"classes":[],"name":null},"type":"component","import":"import SearchProvider from 'react-storefront/search/SearchProvider'"},"search/SearchSubmitButton":{"name":"SearchSubmitButton","filename":"SearchSubmitButton","importPath":"search/SearchSubmitButton","description":"A button to submit the search.  All other props are spread to the provided `Component`.","displayName":"SearchSubmitButton","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"Component","type":{"name":"elementType"},"required":true,"description":"A Material UI button component to display."},{"name":"text","type":{"name":"string"},"required":true,"description":"The current search text."}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFSearchSubmitButton-root","description":"Styles applied to the root element."},{"ruleName":"label","globalClass":".RSFSearchSubmitButton-label","description":"Styles applied to the label element."}],"name":"SearchSubmitButton"},"type":"component","import":"import SearchSubmitButton from 'react-storefront/search/SearchSubmitButton'"},"search/SearchSuggestionGroup":{"name":"SearchSuggestionGroup","filename":"SearchSuggestionGroup","importPath":"search/SearchSuggestionGroup","description":"","displayName":"SearchSuggestionGroup","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"children","type":{"name":"node"},"required":false,"description":"Child nodes that can be used for the suggestion group instead of mapping the [links](#prop-links)."},{"name":"links","type":{"name":"arrayOf","value":{"name":"shape","value":{"as":{"name":"string","required":false},"href":{"name":"string","required":false},"text":{"name":"string","required":false},"pageData":{"name":"object","required":false},"thumbnail":{"name":"object","required":false}}}},"required":false,"description":"An array of props to pass to a [SearchSuggestionItem](/apiReference/search/SearchSuggestionItem)\nwith data for suggested searches."},{"name":"caption","type":{"name":"string"},"required":true,"description":"A title for the list."}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFSearchSuggestionGroup-root","description":"Styles applied to the root element."},{"ruleName":"caption","globalClass":".RSFSearchSuggestionGroup-caption","description":"Styles applied to the group's caption element."},{"ruleName":"list","globalClass":".RSFSearchSuggestionGroup-list","description":"Styles applied to the group's list element."}],"name":"SearchSuggestionGroup"},"type":"component","import":"import SearchSuggestionGroup from 'react-storefront/search/SearchSuggestionGroup'"},"search/SearchSuggestionItem":{"name":"SearchSuggestionItem","filename":"SearchSuggestionItem","importPath":"search/SearchSuggestionItem","description":"","displayName":"SearchSuggestionItem","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."},{"name":"children","type":{"name":"node"},"required":false,"description":"Child nodes that can be used for the link body. If not included, will default to using the\n[item](prop-item)'s `thumbnail` and `text`."},{"name":"item","type":{"name":"shape","value":{"as":{"name":"string","required":false},"href":{"name":"string","required":false},"text":{"name":"string","required":false},"pageData":{"name":"object","required":false},"thumbnail":{"name":"object","required":false}}},"required":false,"description":"Contains all the metadata needed to display the search suggestion item."},{"name":"thumbnailProps","type":{"name":"object"},"required":false,"description":"Props to be passed to the image for thumbnails."},{"name":"ImageComponent","type":{"name":"elementType"},"required":false,"description":"The component type to use to display images.","defaultValue":{"value":"Image","computed":true}}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFSearchSuggestionItem-root","description":""},{"ruleName":"thumbnail","globalClass":".RSFSearchSuggestionItem-thumbnail","description":""}],"name":"SearchSuggestionItem"},"type":"component","import":"import SearchSuggestionItem from 'react-storefront/search/SearchSuggestionItem'"},"search/SearchSuggestions":{"name":"SearchSuggestions","filename":"SearchSuggestions","importPath":"search/SearchSuggestions","description":"","displayName":"SearchSuggestions","methods":[],"props":[{"name":"classes","type":{"name":"object"},"required":false,"description":"Override or extend the styles applied to the component. See [CSS API](#css) below for more details."}],"styles":{"classes":[{"ruleName":"root","globalClass":".RSFSearchSuggestions-root","description":"Styles applied to the root element."},{"ruleName":"group","globalClass":".RSFSearchSuggestions-group","description":"Styles applied to each of the group wrapper elements."}],"name":"SearchSuggestions"},"type":"component","import":"import SearchSuggestions from 'react-storefront/search/SearchSuggestions'"},"session/SessionProvider":{"name":"SessionProvider","filename":"SessionProvider","importPath":"session/SessionProvider","description":"Fetches user session data from a specific URL and provides it to descendant components via `SessionContext`.\n\nUser and session data such as the number of items in the cart, the user's name, and email should always be\nfetched when the app mounts, not in `getInitialProps`, otherwise the SSR result would not be cacheable\nsince it would contain user-specific data.","displayName":"SessionProvider","methods":[],"props":[{"name":"url","type":{"name":"string"},"required":false,"description":"A URL to fetch when the app mounts which establishes a user session and returns user and cart data\nto be made available via `react-storefront/session/SessionContext`."}],"styles":{"classes":[],"name":null},"type":"component","import":"import SessionProvider from 'react-storefront/session/SessionProvider'"},"fetch":{"name":"fetch","type":"function","async":false,"generator":false,"comments":"An isomorphic implementation of the fetch API that always sends the x-rsf-api-version header.  You should\nalways use this to fetch data on both the client and server to ensure that React Storefront's\nservice worker serves responses cached by the service worker.","examples":[],"params":[{"name":"url","type":"String","text":"URL to `fetch`."},{"name":"opts","default":"{}","type":"Object","text":"Options passed to the `fetch` call."}],"returns":[{"type":"Promise","text":"The `Promise` returned from the `fetch` call."}],"import":"import fetch from 'react-storefront/fetch'"},"profile":{"name":"profile","type":"function","async":false,"generator":false,"comments":"Executes the callback and returns its result while logging the execution time to the console.","examples":[],"params":[{"name":"label","type":"String","text":"A string to preface the console.log"},{"name":"cb","type":"Function","text":"A function to execute"}],"returns":[{"type":"Object","text":"The result of the function"}],"import":"import profile from 'react-storefront/profile'"},"serviceWorker/prefetch":{"name":"prefetch","type":"function","async":true,"generator":false,"comments":"Prefetch a URL using the service worker.","examples":[],"params":[{"name":"url","type":"String","text":"The URL to prefetch"}],"returns":[],"import":"import { prefetch } from 'react-storefront/serviceWorker'"},"serviceWorker/prefetchJsonFor":{"name":"prefetchJsonFor","type":"function","async":false,"generator":false,"comments":"Prefetches the JSON API results for a given page","examples":[],"params":[{"name":"url","type":"String","text":"The page URL."}],"returns":[],"import":"import { prefetchJsonFor } from 'react-storefront/serviceWorker'"},"hooks/useAppStore":{"name":"useAppStore","type":"function","async":false,"generator":false,"comments":"Provides a store for app-level data that is shared by all pages, such as\nthe main menu, nav, and footer items.","examples":[],"params":[{"name":"props","type":"Object","text":"Data fetched from `getInitialProps`, which should include an `appData` key."}],"returns":[{"type":"Array","text":"A state and an updater function, similar to the result of React's `useState` hook.\nThe state will contain the value of `appData` returned by `getInitialProps`."}],"import":"import useAppStore from 'react-storefront/hooks/useAppStore'"},"hooks/useIntersectionObserver":{"name":"useIntersectionObserver","type":"function","async":false,"generator":false,"comments":"Calls a provided callback when the provided element moves into or out of the viewport.\n\nExample:\n\n```js\n import React, { useRef, useCallback } from 'react'\n import useIntersectionObserver from 'react-storefront/hooks/useIntersectionObserver'\n\n function MyComponent() {\n   const ref = useRef(null)\n\n   const onVisibilityChange = useCallback((visible, disconnect) => {\n     if (visible) {\n       // do some side effect here\n       // and optionally stop observing by calling: disconnect()\n     }\n   }, [])\n\n   useIntersectionObserver(() => ref, onVisibilityChange, [])\n   return <div ref={ref}></div>\n }\n\n```","examples":[],"params":[{"name":"getRef","type":"Function","text":"A function that returns a ref pointing to the element to observe"},{"name":"cb","type":"Function","text":"A callback to call when visibility changes"},{"name":"deps","type":"Object","extendedType":"Array","text":"The IntersectionObserver will be updated to observe a new ref whenever any of these change"}],"returns":[],"import":"import useIntersectionObserver from 'react-storefront/hooks/useIntersectionObserver'"},"hooks/useLazyState/recordState":{"name":"recordState","type":"function","async":false,"generator":false,"comments":"Records the page state in history.state.rsf[uri].  Why is this needed?  Why can we not\nsimply rely on the page data being in the browser's cache via the service worker? It's\nbecause we want to restore the state of the page as the user left it, including sorting,\npaging, and any other changes which might not be reflected in the URL.","examples":[],"params":[{"name":"state","type":"Object","text":"The page state"}],"returns":[],"import":"import { recordState } from 'react-storefront/hooks/useLazyState'"},"hooks/useStateFromProp":{"name":"useStateFromProp","type":"function","async":false,"generator":false,"comments":"The same as React's `useState`, but automatically updated when the specified prop value changes.","examples":[],"params":[{"name":"prop","type":"Object"}],"returns":[{"type":"Array","text":"The same as what's returned from React's useState hook."}],"import":"import useStateFromProp from 'react-storefront/hooks/useStateFromProp'"},"middlewares/withAmpFormParser":{"name":"withAmpFormParser","type":"function","async":false,"generator":false,"comments":"Wraps the provided handler in a middleware that parses AMP form submissions correctly.  By\ndefault, next.js's body parser doesn't handle multipart form posts properly, so you\nwon't be able to receive data posted from a form in AMP.\n\nWhen using this middleware, you should always disable next's default body parser by adding\nthe following to your api endpoint:\n\n```js\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n}\n```","examples":[],"params":[{"name":"handler","type":"Function","text":"An API endpoint"}],"returns":[{"type":"Function","text":"Your API function with body parsing middleware added."}],"import":"import withAmpFormParser from 'react-storefront/middlewares/withAmpFormParser'"},"plp/useSearchResultsStore":{"name":"useSearchResultsStore","type":"function","async":false,"generator":false,"comments":"Allows for using search results.","examples":[],"params":[{"name":"lazyProps"}],"returns":[{"type":"Array"}],"import":"import useSearchResultsStore from 'react-storefront/plp/useSearchResultsStore'"},"props/createLazyProps":{"name":"createLazyProps","type":"function","async":false,"generator":false,"comments":"Creates a function for next's `getInitialProps` that returns \"lazy\" props after a maximum `timeout` that\ndefaults to 50ms. This function should be used in conjunction with `hooks/useLazyState` in the component\nto display a skeleton until page data is returned from the network.\n\nDuring client-side navigation, this allows the page component to render before the fetched data is returned from the server.\nThis gives us an opportunity to display a skeleton when the network is slow.  On a fast network or when the response is\ncached in the browser, and thus returns within the configured timeout, the fetched data will be available for the page's\ninitial render, and we can skip the skeleton.\n\nWhen rendering on the server, the timeout is not enforced.  This function simply waits for the network and returns\nonce data is received.\n\nExample:\n\n```js\nimport useLazyState from 'react-storefront/hooks/useLazyState'\nimport fetchFromAPI from 'react-storefront/props/fetchFromAPI'\n\nfunction Product(lazyProps) {\n  const [state, updateState] = useLazyState(lazyProps)\n  const { product } = state.pageData\n\n  // state.loading will be true while fetching product data from the server\n\n  // state.pageData will be populated with the `pageData` prop provided to the <Link> element\n  // that was clicked.  In this way you can provide partial data to a page.  For example:\n  //\n  // <Link href=\"/p/[productId]\" as={`/p/${product.id}`} pageData={{ product }}>{product.name}</Link>\n\n  return (\n    <Grid container spacing={4}>\n      <Grid item xs={12}>\n        { product.name ? <Typography variant=\"h1\">{product.name}</Typography> : <Skeleton style={{ height: 16 }}/> }\n      </Grid>\n      // render the rest of the PDP\n    </Grid>\n  )\n}\n\nProduct.getInitialProps = createLazyProps(opts => {\n  return fetchFromAPI(opts)\n}, { timeout: 50 })\n```","examples":[],"params":[{"name":"fetchCallback","type":"Function","text":"A function to use to create the URL"},{"name":"options","default":"{}","type":"Object","properties":[{"name":"timeout","default":"100","type":"Object","text":"The max duration to wait before resolving so that the page\n component will be rendered and can display a skeleton while waiting for the promise returned\n by `fetchCallback` to resolve"}]}],"returns":[],"import":"import createLazyProps from 'react-storefront/props/createLazyProps'"},"props/fetchFromAPI":{"name":"fetchFromAPI","type":"function","async":false,"generator":false,"comments":"A convenience function to be used in `getInitialProps` to fetch data for the page from an\nAPI endpoint at the same path as the page being requested.  So for example, when rendering\n`/p/1`, this function will fetch data from `/api/p/1`.\n\n```js\nimport fetchFromAPI from 'react-storefront/props/fetchFromAPI'\nimport createLazyProps from 'react-storefront/props/createLazyProps'\n\nProduct.getInitialProps = createLazyProps(opts => {\n  return fetchFromAPI(opts)\n})\n```\n\nOr simply:\n\n```js\nProduct.getInitialProps = createLazyProps(fetchFromAPI)\n```","examples":[],"params":[{"name":"opts","type":"Object","text":"The options object provided to `getInitialProps`","properties":[{"name":"req"},{"name":"asPath"},{"name":"pathname"}]}],"returns":[{"type":"Promise","text":"A promise that resolves to the data that the page should display"}],"import":"import fetchFromAPI from 'react-storefront/props/fetchFromAPI'"},"props/fulfillAPIRequest":{"name":"fulfillAPIRequest","type":"function","async":true,"generator":false,"comments":"Creates an API response that contains app level data only when `?_includeAppData=1` is present in\nthe query string. Otherwise, the `appData` promise provided will not be resolved.","examples":[],"params":[{"name":"req","type":"Request","text":"The request being served"},{"name":"options","type":"Object","properties":[{"name":"appData","type":"Function","text":"An async function that returns a data for shared component in\nthe app such as menu, nav, and footer"},{"name":"pageData","type":"Function","text":"An async function that return data for the page component"}]}],"returns":[{"type":"Object","text":"the result of `appData` and `pageData` merged into a single object."}],"import":"import fulfillAPIRequest from 'react-storefront/props/fulfillAPIRequest'"},"router/replaceState":{"name":"replaceState","type":"function","async":false,"generator":false,"comments":"Replaces the history state in a way that is compatible with next.js. Use this function\ninstead of `history.replaceState` to ensure that next.js uses your new state's URL when going back.","examples":[],"params":[{"name":"state","type":"Object","text":"A new state.  If `null`, the existing state will be preserved."},{"name":"title","type":"String","text":"A new title for the document, if `null`, the existing title will be preserved."},{"name":"url","type":"String","text":"The new URL"}],"returns":[],"import":"import replaceState from 'react-storefront/router/replaceState'"},"router/storeInitialPropsInHistory":{"name":"storeInitialPropsInHistory","type":"function","async":false,"generator":false,"comments":"Patches `history.pushState` and `history.replaceState` to stores the props of the\ncurrent main component in `history.state` before navigating.  This allows us to instantly\nrender the main component when the user goes back","examples":[],"params":[],"returns":[],"import":"import storeInitialPropsInHistory from 'react-storefront/router/storeInitialPropsInHistory'"},"theme/createTheme":{"name":"createTheme","type":"function","async":false,"generator":false,"comments":"Creates the default theme for your React Storefront app.  See Material UI's theme documentation\nfor more info: https://material-ui.com/customization/default-theme/","examples":[],"params":[{"name":"values","default":"{}","type":"Object"}],"returns":[{"type":"Object","text":"A material UI theme"}],"import":"import createTheme from 'react-storefront/theme/createTheme'"},"utils/fetchLatest/default":{"name":"fetchLatest","type":"function","async":false,"generator":false,"comments":"Creates a fetch function with an internal incrementing request counter that ensures that out of order\nresponses result in a `StaleResponseError`.\n\nExample usage:\n\n```js\nimport { fetchLatest, StaleResponseError } from 'react-storefront/fetchLatest'\nimport originalFetch from 'fetch'\n\nconst fetch = fetchLatest(originalFetch)\n\ntry {\n  const response = await fetch('/some/url')\n} catch (e) {\n  if (!StaleResponseError.is(e)) {\n    throw e // just ignore stale responses, rethrow all other errors\n  }\n}\n```","examples":[],"params":[{"name":"fetch","type":"Function","text":"An implementation of the standard browser fetch."}],"returns":[{"type":"Function"}],"import":"import fetchLatest from 'react-storefront/utils/fetchLatest'"},"utils/fetchLatest/StaleResponseError":{"name":"StaleResponseError","type":"class","async":false,"generator":false,"comments":"Thrown when an out of order response is received from `fetchLatest`.","examples":[],"params":[],"returns":[],"import":"import { StaleResponseError } from 'react-storefront/utils/fetchLatest'","members":[]},"utils/format/price":{"name":"price","type":"function","async":false,"generator":false,"comments":"Formats a price for display.","examples":[],"params":[{"name":"price","type":"Number","text":"The price as a floating point number"},{"name":"options","default":"{}","type":"Object","properties":[{"name":"currency","default":"'USD'","type":"String","text":"The currency code"},{"name":"decimals","default":"2","type":"Number","text":"The number of decimal places to display"},{"name":"locale","default":"'en-US'","type":"String","text":"The locale code"}]}],"returns":[{"type":"String"}],"import":"import { price } from 'react-storefront/utils/format'"},"utils/isBrowser":{"name":"isBrowser","type":"function","async":false,"generator":false,"comments":"Returns true when running in the browser, otherwise false.","examples":[],"params":[],"returns":[],"import":"import isBrowser from 'react-storefront/utils/isBrowser'"},"utils/lazyLoadImages":{"name":"lazyLoadImages","type":"function","async":false,"generator":false,"comments":"Observes the visibility of all `img` elements inside the specified element\nthat match the specified selector. When an image becomes visible, the `data-src`\nattribute is copied to `src`.\n\nSee https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video/","examples":[],"params":[{"name":"element"},{"name":"$1","default":"{}","type":"Object","properties":[{"name":"selector","default":"'img[data-rsf-lazy]'"}]}],"returns":[],"import":"import lazyLoadImages from 'react-storefront/utils/lazyLoadImages'"},"utils/merge":{"name":"merge","type":"function","async":false,"generator":false,"comments":"Deep merges sources onto object. The same as [`lodash/merge`](https://lodash.com/docs/4.17.15#merge),\nexcept arrays are not concatenated.  When a source object provides an array, it replaces the value on the target.","examples":[],"params":[{"name":"object"},{"name":"sources","type":"any"}],"returns":[],"import":"import merge from 'react-storefront/utils/merge'"},"utils/withCaching":{"name":"withCaching","type":"function","async":false,"generator":false,"comments":"Creates a cancelable event handler that will run unless the provided\nhandler calls `e.preventDefault()`.","examples":[],"params":[{"name":"handler","type":"Function","text":"The original event handle supplied to the component"},{"name":"maxAgeSeconds","type":"Number","text":"The time in seconds that a result should be kept in the service worker cache."}],"returns":[{"type":"Function"}],"import":"import withCaching from 'react-storefront/utils/withCaching'"},"utils/withDefaultHandler":{"name":"withDefaultHandler","type":"function","async":false,"generator":false,"comments":"Creates a cancelable event handler that will run unless the provided\nhandler calls `e.preventDefault()`.","examples":[],"params":[{"name":"handler","type":"Function","text":"The original event handle supplied to the component"},{"name":"defaultHandler","type":"Function","text":"A handler to run unless `e.preventDefault()` was called."}],"returns":[{"type":"Function"}],"import":"import withDefaultHandler from 'react-storefront/utils/withDefaultHandler'"}}}